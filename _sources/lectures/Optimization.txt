{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Optimization\n",
    "<a name=\"optimization\"></a>\n",
    "\n",
    "## Overview, Objectives, and Key Terms\n",
    " \n",
    "In [Root Finding](#root_finding), the bisection method and Newton's method were used to solve nonlinear equations.  Now, those methods (and tools like `fsolve`) are used to solve **optimization problems**. The subject is rich, so we'll touch on only the basics, but you'll have tools at your disposal to tackle such problems in varied applications.\n",
    " \n",
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- Find local extrema of a function $f(x)$ using the bisection and Newton methods.\n",
    "- Use `minimize` to solve nonlinear optimization problems.\n",
    "\n",
    "### Key Terms\n",
    "\n",
    "- optimization\n",
    "- uncontrained optimization\n",
    "- constrained optimization\n",
    "- extremum\n",
    "- critical point\n",
    "- objective function\n",
    "- linear program\n",
    "- `scipy.optimize.minimize`\n",
    "- `scipy.optimize.linprog`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Some Nomenclature\n",
    "\n",
    "Optimization problems often defined by minimizing an **objective function**\n",
    "\n",
    "$$\n",
    "  \\min_{x} f(x) \\qquad \\text{or} \\qquad \\min_{\\mathbf{x}} f(\\mathbf{x}) \\, ,\n",
    "$$\n",
    "\n",
    "subject to the **inequality constraints**\n",
    "\n",
    "$$\n",
    "  g(x) \\ge 0 \\qquad \\text{or} \\qquad \\mathbf{g(x)}  \\ge \\mathbf{0} \\, ,\n",
    "$$\n",
    "\n",
    "and/or the **equality constraints**\n",
    "\n",
    "$$\n",
    "  h(x) = 0 \\qquad \\text{or} \\qquad \\mathbf{h(x)} = \\mathbf{0} \\, .\n",
    "$$\n",
    "\n",
    "An optimization problem is *unconstrained* if it is subject to no inequality constraints and no equality constraints.  Otherwise, the problem is *constrained*.  In practice, unconstrained problems are often easier to solve using a variety of techniques for finding *extrema*.  We'll start with unconstrained problems and then consider an important class of constrained problems known as *linear programs*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finding Extrema\n",
    "\n",
    "One of the great applications of differentiation is its ability\n",
    "to identify the *critical points* of a function $f(x)$, which\n",
    "include its *minima* and *maxima*, i.e., its *extrema*.  Suppose\n",
    "$f(x)$ represents some quantity of interest, perhaps the cost \n",
    "of materials for some component or the signal-to-noise ratio of\n",
    "some sensor.  If we want to mininimize those costs or maximize those\n",
    "ratios, we need to use *optimization*.  Although optimization problems\n",
    "and the techniques to solve them are quite diverse, we will stick to\n",
    "1-D problems in which the *objective function* to be minimized or \n",
    "maximized is continuous (as opposed to discrete).\n",
    "\n",
    "You've had calculus (and we've reviewed some its topics).  Hence, you might recall that a function $f(x)$ exhibits an **extremum**, i.e., a **minimum** or **maximum**, at any point $x$ for which $f'(x)$ is zero and $f''(x)$ is nonzero.  When $f'(x)$ *and* $f''(x)$ vanish, the point is often called a **saddle point**, though that term is more meaningful in multiple dimensions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "**Exercise**: Given some fencing of *fixed* length `L`, what is the largest area that fencing can enclose if arranged in a rectangle  of sides `a` and  `b`?  \n",
    "\n",
    "*Solution*:\n",
    "\n",
    "Here's the problem.  We want to maximize $A = ab$ where $2a+2b = L$ or $b = L/2 - a$.  We know $L$ and $b$ depends on $a$, so there is just one free parameter (i.e., we're in 1-D where we'll stay throughout).  Note that $a$ (and $b$) can range from 0 to $L/2$.\n",
    "\n",
    "Formally, we see a solution to\n",
    "\n",
    "$$\n",
    "  \\max_{a \\in [0,\\, L/2]} a\\left (\\frac{L}{2}-a \\right)\n",
    "$$\n",
    "\n",
    "which reads \"find the value of $a$ in the range $[0, L/2]$ that maximizes the quantity $f(a) = a(L/2-a)$.  Here, $f(a)$ is the **objective function**.\n",
    "\n",
    "Differentiation of $f(a)$ gives\n",
    "\n",
    "$$\n",
    "  f'(a) = L/2 - 2a \n",
    "$$\n",
    "\n",
    "which, when set to zero, requires that $a = L/4$.  Consequently, $b = L/2-a = L/4 = a$.  That is to say, our fence must form a square to maximize the area enclosed.\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Connection To Nonlinear Functions\n",
    "\n",
    "\n",
    "As the fence exercise illustrates, if we can write down the derivative and explicitly find the point at which it vanishes, our problem is solved.  That is rarely the case.  Often, the functions of interest have complicated derivatives that make $f'(x) = 0$ a nonlinear equation.  We generally can't solve that problem directly. In many cases, we don't even have $f'(x)$, and at best, we can approximate it numerically using finite differences.  \n",
    "\n",
    "Further complicating matters is that even if we can solve  $f'(x)=0$, the result might not be an extremum (consider $f(x)=x^3$ and the  zeros of its derivative $3x^2$), and it might not be unique. \n",
    "\n",
    "Consider the following example (for $f(x) = \\sin(x^22)-3)^2$): "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib\n",
    "%matplotlib inline\n",
    "import nonlinear_plots\n",
    "nonlinear_plots.extrema()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Of the three roots, two correspond to minima---but the left one (blue circle) is greater than the right one (red square), so is it really a minimum?  *Yes*, if we make the distinction between *local* and *global* minima.  For this problem, the right minimum is the *global* minimum, while the central root (green star) represents a local maximum ($f(x)$ is *unbounded*, i.e.,  there is no value $M < \\infty$ such that $|f(x)| < M$ for all possible values of $x$).  Given the choice,  a global optimum is usualy preferred, but for many cases, we're at best guaranteed a local minimum.  There are techniques to increase our  chances of finding a global optimum, but that's outside the present scope!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solving Unconstrained Optimization Problems\n",
    "\n",
    "\n",
    "### When the Derivative is Available\n",
    "\n",
    "If we have $f(x)$ and can evaluate $f'(x)$, then either Newton's method or the secant method can be applied to $f'(x) = 0$.  The same goes for multi-variable problems, where the gradient $\\nabla f(\\mathbf{x})$ replaces $f'(x)$, and the *hessian* matrix $\\mathbf{H}(\\mathbf{x})$ replaces $f''(x)$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "**Exercise**: Find the value of $x$ that maximizes the function $f(x) = 2\\sin(x) - x^2/10$ starting with $x_0 = 2.5$.  Then, confirm your result by showing it on a graph of $f(x)$.\n",
    "\n",
    "*Solution*.  We can immediately differentiate $f(x)$ to find $f'(x) = 2\\cos(x) + x/5$ and $f''(x) = -2\\sin(x) + 1/5$. Then, Newton's method gives"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f0c80f039e8>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "f = lambda z: 2*np.sin(z) - z**2/10 # objective function\n",
    "fp = lambda z: 2*np.cos(z) - z/5    \n",
    "fpp = lambda z: -2*np.sin(z) - 1/5  \n",
    "\n",
    "x = 2.5 # initial guess\n",
    "while abs(fp(x)) > 1e-12:\n",
    "    x = x - fp(x)/fpp(x)\n",
    "\n",
    "x_vals = np.linspace(0, 5)\n",
    "plt.plot(x_vals, f(x_vals), 'k', label='f(x)')\n",
    "plt.plot(x_vals, fp(x_vals), 'g--', label=\"f'(x)\")\n",
    "plt.plot(x, f(x), 'rx', ms='20', label='optimum') # X marks the spot...\n",
    "plt.xlabel('x')\n",
    "plt.title('maximum values of f(x) is {:.2e} at x={:.2e}'.format(f(x), x))\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "***\n",
    "\n",
    "**Exercise**: Consider the objective function $f(\\mathbf{x}) = ax_0 + bx_1 - (2x_0^2 + x_0 x_1 + 2x_1^2)$.  Compute $\\nabla f(\\mathbf{x})$ and $\\mathbf{H}(\\mathbf{x})$ (which is the jacobian of $\\mathbf{\\nabla g}(x)$.  Then, for $a = 5$ and $b = 10$, determine the values of $x_0$ and $x_1$ that maximize $f(\\mathbf{x})$ starting with $\\mathbf{x} = [1, 2]^T$.\n",
    "\n",
    "*Solution*:\n",
    "\n",
    "The gradient is\n",
    "\n",
    "$$\n",
    "\\nabla f(\\mathbf{x}) = \n",
    "\\left [ \\begin{array}{c}\n",
    "  \\partial f / \\partial x_0 \\\\\n",
    "  \\partial f / \\partial x_1 \n",
    "\\end{array} \\right ] =\n",
    "\\left [ \\begin{array}{c}\n",
    "   a - 4 x_0 - x_1 \\\\\n",
    "   b - 4 x_1 - x_0\n",
    "\\end{array} \\right ] \\, .\n",
    "$$\n",
    "\n",
    "The hessian matrix is the jacobian matrix for $\\mathbf{\\nabla f}(\\mathbf{x})$, or\n",
    "$$\n",
    "\\mathbf{H}(\\mathbf{x}) =\n",
    "\\left [ \\begin{array}{cc}\n",
    "  \\partial \\nabla f_0 / \\partial x_0 & \\partial \\nabla f_0 / \\partial x_1 \\\\\n",
    "  \\partial \\nabla f_1 / \\partial x_0 & \\partial \\nabla f_1 / \\partial x_1 \\\\\n",
    "\\end{array} \\right ] =\n",
    "\\left [ \\begin{array}{c}\n",
    "   -4 & -1 \\\\\n",
    "   -1 & -4\n",
    "\\end{array} \\right ] \\, .\n",
    "$$\n",
    "\n",
    "Now, apply Newton's method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "f = lambda z: 5*z[0] + 10*z[1] - (2*z[0]**2 + z[0]*z[1] + 2*z[1]**2)\n",
    "gf = lambda z: np.array([5-4*x[0]-x[1], \n",
    "                        10-4*x[1]-x[0]]) # gradient of f\n",
    "H = np.array([[-4.0, -1.0],\n",
    "              [-1.0, -4.0]])  \n",
    "\n",
    "# Apply Newton's method\n",
    "x = np.array([1.0, 2.0])\n",
    "while sum(abs(gf(x))) > 1e-8:\n",
    "    x = x - np.linalg.solve(H, gf(x))\n",
    "    \n",
    "# Plot the results and show where the maximum exists\n",
    "x0, x1 = np.linspace(0, 5), np.linspace(0, 5)\n",
    "x0, x1 = np.meshgrid(x0, x1)\n",
    "plt.contourf(x0, x1, f([x0, x1]), 25)\n",
    "plt.colorbar()\n",
    "plt.plot(x[0], x[1], 'rx', ms=20)\n",
    "plt.xlabel('$x_0$')\n",
    "plt.ylabel('$x_1$')\n",
    "plt.title('$f(x_0, x_1)$');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### When the Derivative is Unavailable\n",
    "\n",
    "If we have $f'(x)$, we can apply Newton's method to $f'(x) = 0$.  Assuming we don't, how can we proceed?  One option is to adapt the bisection method.  Now, the search is not based on the change of the sign of $f(x)$ but rather it's magnitude relative to the left and right points.  Again, we have to have isolated our (single) target value in some finite range, which may be no easy task (plotting helps).   Alternatively, Newton-like methods can be used by approximating both $f'(x)$ and $f''(x)$ (or their multi-dimensional analogs) with finite differences."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using `scipy.optimize.minimize`\n",
    "\n",
    "An alternative to Newton's method is the `minimize` function in `scipy.optimize`. From `help(minimize)`, we find\n",
    "\n",
    "```\n",
    "Help on function minimize in module scipy.optimize._minimize:\n",
    "\n",
    "minimize(fun, x0, args=(), method=None, jac=None, hess=None, hessp=None, bounds=None, constraints=(), \n",
    "         tol=None, callback=None, options=None)\n",
    "    Minimization of scalar function of one or more variables.\n",
    "```\n",
    "\n",
    "At a minimum, one must define (1) the function `fun` to minimize, and (2) an initial guess `x0` for the solution.  The function minimize returns an *object* with several attributes, one of which is the solution `x`.  Therefore, if one calls `sol = minimize(fun, x0)`, the solution is `sol.x`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "**Exercise**: Use `minimize` to find the *maximum* of $f(x) = 2\\sin(x) - x^2/10$ starting with $x_0 = 2.5$.  \n",
    "\n",
    "**Solution**: Note that any maximization problem can be turned into a minimization problem negating the objective function, i.e., $f(x)$ becomes $-f(x)$.  Then:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.42755179]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from scipy.optimize import minimize\n",
    "f = lambda x: -2*np.sin(x) + x**2 / 10\n",
    "sol = minimize(f, x0=2.5)\n",
    "print(sol.x) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Example**: Use `minimize` to find $\\mathbf{x} = [x_0, x_1]^T$ that minimizes $f(x) =x_0^2 - x_0 - 2 x_1 - x_0 x_1 + x_1^2$.  Use an initial guess of $x_0 = x_1 = 0$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Solution**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.33333353 1.66666666]\n"
     ]
    }
   ],
   "source": [
    "f = lambda x: x[0]**2 - x[0] -2*x[1] - x[0]*x[1] + x[1]**2\n",
    "x_initial = [0.0, 0.0]\n",
    "sol = minimize(f, x0=x_initial)\n",
    "print(sol.x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solving Constrained Optimization Problems\n",
    "\n",
    "Optimization with constraints is a much more challenging problem.  Although `minimize` can be used for such problems, we limit our focus to a specific class of constrained optimization problems known as [linear programs](https://en.wikipedia.org/wiki/Linear_programming).  The standard form of a linear program is\n",
    "\n",
    "$$\n",
    "  \\min_{\\mathbf{x}} \\mathbf{c}^T \\mathbf{x}\\, ,\n",
    "$$\n",
    "\n",
    "subject to \n",
    "\n",
    "$$\n",
    "  \\mathbf{A}_{ub}\\mathbf{x} \\le \\mathbf{b}_{ub} \\, ,\n",
    "$$\n",
    "\n",
    "and \n",
    "\n",
    "$$\n",
    "  \\mathbf{A}_{eq}\\mathbf{x} = \\mathbf{b}_{eq} \\, .\n",
    "$$\n",
    "\n",
    "Note, the objective function is *linear*, and $\\mathbf{c}$ represents a vector of costs associated with each element of $\\mathbf{x}$.  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The ideal tool for solving such problems is `scipy.optimize.linprog`, for which help provides\n",
    "\n",
    "```\n",
    "linprog(c, A_ub=None, b_ub=None, A_eq=None, b_eq=None, bounds=None, method='simplex', callback=None, options=None)\n",
    "    Minimize a linear objective function subject to linear\n",
    "    equality and inequality constraints.\n",
    "    \n",
    "    Linear Programming is intended to solve the following problem form::\n",
    "    \n",
    "        Minimize:     c^T * x\n",
    "    \n",
    "        Subject to:   A_ub * x <= b_ub\n",
    "                      A_eq * x == b_eq\n",
    "```\n",
    "\n",
    "Here, `A_ub` and `A_eq` are two-dimensional arrays, while `c`, `b_ub`, and `b_eq` are one-dimensional arrays. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "**Exercise**.  Use `linprog` to find $\\mathbf{x} = [x_0, x_1]^T$ that *maximizes* $x_0 + x_1$ subject to the constraints\n",
    "\n",
    "$$\n",
    "x_0 \\ge 0 \\\\\n",
    "x_1 \\ge 0 \\\\\n",
    "x_0 + 2 x_1 \\leq 4 \\\\\n",
    "4 x_0 + 2 x_1 \\leq 12 \\\\\n",
    "-x_0 +  x_1 \\leq 1 \\\\\n",
    "$$\n",
    "\n",
    "*Solution*:  Note first that the cost vector $\\mathbf{c}$ should be $[-1, -1]^T$ so that the sum of $x_0$ and $x_1$ is *maximized*.  All of the inequality constraints can be cast in $\\mathbf{A}_{ub} \\mathbf{x} \\le \\mathbf{b}_{ub}$ form by noting that if $x_0 \\ge 0$ then $-x_0 \\le 0$.  Therefore, these constraints can be written as\n",
    "\n",
    "$$\n",
    "\\left [ \\begin{array}{cc}\n",
    "-1 & 0 \\\\\n",
    " 0 & -1 \\\\\n",
    " 1 & 2 \\\\\n",
    " 4 & 2 \\\\\n",
    "-1 & 1\n",
    "\\end{array} \\right] \n",
    "\\left [ \\begin{array}{cc}\n",
    "x_0 \\\\\n",
    "x_1 \n",
    "\\end{array} \\right] \\leq\n",
    "\\left [ \\begin{array}{c}\n",
    " 0 \\\\\n",
    " 0 \\\\\n",
    " 4 \\\\\n",
    "12 \\\\\n",
    "1 \n",
    "\\end{array} \\right] \n",
    "$$\n",
    "\n",
    "Finally, there are no equality constraints.  From here, `linprog` can be used via "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.66666667 0.66666667]\n"
     ]
    }
   ],
   "source": [
    "from scipy.optimize import linprog\n",
    "import numpy as np\n",
    "c = np.array([-1, -1])\n",
    "A_ub = np.array([[-1.0, 0.0],\n",
    "                 [0.0, -1.0],\n",
    "                 [1.0, 2.0],\n",
    "                 [4.0, 2.0],\n",
    "                 [-1.0, 1.0]])\n",
    "b_ub = np.array([0, 0, 4, 12, 1])\n",
    "sol=linprog(c, A_ub, b_ub)\n",
    "print(sol.x) # like minimize, linprog returns an object \n",
    "             # with attribute x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "***\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "**Exercise**.  Suppose the Acme Concrete Company is supplying concrete for three large-scale projects.  The company has production facilities in four different locations.  Projects 0, 1, and 2 require 250, 400, and 500 cubic meters of concrete each week.  Plants A, B, C, and D produce 350, 200, 400, and 450 cubic meters each week. Although the plants, in total, produce more than enough to supply all three projects, the cost to provide the concrete depends on the distance traveled between the plant and the project. The cost per cubic meter to ship from any plant to any project is summarized n the table below:\n",
    "\n",
    "|    | 0  | 1  | 2 |\n",
    "|----|---|---|\n",
    "| **A**  | 10  | 20 | 30  |\n",
    "| **B**  | 15  |  5 | 20  |\n",
    "| **C**  | 25 |  20  |15  |\n",
    "| **D**  | 30  | 10  | 20 |\n",
    "\n",
    "How much should each plant supply to each project?  Convert this problem into a linear program, and then use `linprog` to determine the solution.\n",
    "\n",
    "***\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Further Reading\n",
    "\n",
    "Checkout out the [SciPy documentation](https://docs.scipy.org/doc/scipy/reference/optimize.html) on optimization and root finding."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
