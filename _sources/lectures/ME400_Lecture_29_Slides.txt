{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Lecture 29 - Solving ODEs Symbolically\n",
    " \n",
    "Last time: the basics of `SymPy` to solve *algebraic* equations\n",
    "\n",
    "This time: use of `SymPy` to solve *differential* equations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- Define first- and second-order, ordinary differential equations symbolically\n",
    "- Solve first- and second-order, ODEs symbollically\n",
    "- Apply initial and boundary conditions as is appropriate to determine complete solutions to ODEs important in engineering disciplines."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Prerequisites\n",
    "\n",
    "You should already be able to\n",
    "\n",
    "- Solve ODEs based on what you've learned in a course like MATH 340.\n",
    "- Set up and solve algebraic systems using SymPy\n",
    "- Perform subsitution into symbolic values using SymPy\n",
    "- Define derivatives of arbitrary functions using SymPy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Key Terms\n",
    "\n",
    "- differential equation\n",
    "- ordinary\n",
    "- linear\n",
    "- ODE\n",
    "- initial value problem\n",
    "- boundary value problem"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Derivatives and Integrals\n",
    "\n",
    "SymPy can be used to differentiate and integrate a symbolic expression `expr` with respect to a symbol `x`:\n",
    "\n",
    "```python\n",
    "sy.diff(expr, x)              # first derivative\n",
    "sy.diff(expr, x, 2)           # second derivative\n",
    "sy.integrate(expr, x)         # indefinite integral\n",
    "sy.integrate(expr, (x, a, b)) # definite integral\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**:  Let $f(x) = ax^2$.  Evaluate the following (a) $\\frac{d}{dx} f$, (b) $\\frac{d^3}{dx^3} f$, (c) $\\int f(x) dx$ and (d) $\\int^{2}_{0} f(x) dx$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "import sympy as sy\n",
    "sy.init_printing()\n",
    "a, x = sy.symbols('a x')\n",
    "f = a*x**2 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAABYAAAAqBAMAAABFIrbeAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHaJmUSrVGYizbvd7zLJaKAlAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA6klEQVQYGWNgEFJ2ZYABBwa2AiibvYGBcwGUzbyBgfEAlM36W4C5AcpmyP9hwcDA6ex0ESjA/H8hA0PsBK4PQHZZzN8AxhsMLBsYGDgSGPQvsnxk4FFgYOCdwMD3nXcDg/wDBgZ5oLIMeQOGeiANFGfYKV/AsIt9AgPrQgYOBS4FjmPMQIlnzq4MjEl201SBbBqD/whAsU2TjbfDzOB0YKhvgHKYvjPwH4CyWa8yyC+AsoEUXA0DA+NhuDCnjSOczcBgG4Dg8IJCHAQ4JzBwf4cwGfg/ItjAUOb5CRXnaGCoV4CyGUJctoKYAHiuO0NZdgxvAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\frac{8 a}{3}$$"
      ],
      "text/plain": [
       "8⋅a\n",
       "───\n",
       " 3 "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sy.integrate(f, (x, 0, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAABQAAAAOBAMAAADd6iHDAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAIpm7MhCriUTv3c12VGZoascqAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAgUlEQVQIHWNgVDJ2YICAMAb2H1BmKgPDTChzFgNDvgOEvT8AzgQKrA9gECo6GQBkcXxn4JjIsB+kiCuBIfIBgzKIqcTAoB/AsAbI4lFgYJjMwPoFyLzEwCj6nYH3AwMDiwIDj+hfBuYNFxmkyouyGPYwvEooYNj///8vhrDjjjkNAMjNHzXk+S3KAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$2 a$$"
      ],
      "text/plain": [
       "2⋅a"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sy.diff(f, x, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "SymPy also supports use of symbols as *functions*:\n",
    "\n",
    "```\n",
    "f, x = sy.symbols('f x')\n",
    "f(x) # <--- this is a valid expression that can be \n",
    "     # integrated, differentiated, etc.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**:  Use SymPy to \"prove\"  \n",
    " 1. the *product rule* $\\frac{d}{dx}[f(x)g(x)] = f(x)\\frac{dg}{dx} + \\frac{df}{dx}g(x)$\n",
    " 2. the chain rule $\\frac{d}{dx}f(g(x)) = \\frac{df}{dg}\\frac{dg}{dx}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "x, f, g = sy.symbols('x f g')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\frac{d}{d x} g{\\left (x \\right )} \\left. \\frac{d}{d \\xi_{1}} f{\\left (\\xi_{1} \\right )} \\right|_{\\substack{ \\xi_{1}=g{\\left (x \\right )} }}$$"
      ],
      "text/plain": [
       "d        ⎛ d        ⎞│       \n",
       "──(g(x))⋅⎜───(f(ξ₁))⎟│       \n",
       "dx       ⎝dξ₁       ⎠│ξ₁=g(x)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sy.diff(f(g(x)), x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Defining ODEs\n",
    "\n",
    "Consider the first-order IVP with constant coefficients\n",
    "\n",
    "$$\n",
    "  y' + py(t) = q\\, , \\qquad y(0) = y_0 \\, .\n",
    "$$\n",
    "\n",
    "This can be represented using `sy.Eq` like an algebraic equation and solved using `sy.dsolve(eq, y(t))` to obtain the *general* solution.  Undetermined coefficients are found by applying the initial condition.\n",
    "\n",
    "**Exercise**:  Solve $y' + 2y = 1$ with $y(0) = 1$ and plot the solution for $t \\in [0, 10]$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Boundary-value problems can also be solved.  Consider the familiar equation\n",
    "\n",
    "$$\n",
    "  -\\frac{d}{dx} k(x) \\frac{dT}{dx} = q(x) \\, , \\qquad T(0) = 0, T(1) = 1.\n",
    "$$\n",
    "\n",
    "**Exercise**: Solve this for $k(x) = 1$ and $q(x) = x^2$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recap\n",
    "\n",
    "You should now be able to\n",
    "\n",
    "- Define first- and second-order, ordinary differential equations symbolically\n",
    "- Solve first- and second-order, ODEs symbollically\n",
    "- Apply initial and boundary conditions as is appropriate to determine complete solutions to ODEs important in engineering disciplines."
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "livereveal": {
   "scroll": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
