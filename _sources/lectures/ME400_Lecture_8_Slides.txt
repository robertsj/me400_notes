{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Lecture 8 - Loops in Python\n",
    " \n",
    "In [Lecture 5](Algorithms_Flowcharts_and_Pseudocode.ipynb), the basics of programming logic were introduced, including the idea of *iteration*. The emphasis here and in the next lesson is on the logic of *iteration* and its implementation via `while` and `for` loops in Python.  To proceed, one must be comfortable with the theoretical coverage of iteration presented in [Lecture 5](Algorithms_Flowcharts_and_Pseudocode.ipynb)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "### Quick Announcements\n",
    "\n",
    "HW4 will be graded early Thursday. Exam 1 on Friday:\n",
    "- Half written, half coded.\n",
    "- Past exams on Canvas provide examples of my exam style (and good practice questions)\n",
    "- You can use: a pen/pencil and one **hand written** 11'' by 8.5'' sheet, front and back. No calculator. No internet.  No talking between labs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Wrap Up Four Seasons Question"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- Use a `while` loop to solve simple problems using iteration\n",
    "- Turn pseudocode and flowcharts into Python code\n",
    "- Use the graphical debugger in Spyder to trace and debug a program with iteration"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Key Terms\n",
    "\n",
    "- `while`\n",
    "- `break`\n",
    "- summation problem (as a common loop example)\n",
    "- numerical convergence (as another common loop example)\n",
    "- convergence criterion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Diving Into `while` loops"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "A prototypical problem: *add the integers from 1 through n*.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "**Exercise** Develop a program using pseudocode or a flowchart to solve this problem."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "```\n",
    "'''Program to add the integers from 1 through n'''\n",
    "Input: n\n",
    "\n",
    "\n",
    "Output: s\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "![Flowchart for adding integers](img/add_integer_range.png)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "# A Python program to add the integers from 1 through n\n",
    "n = int(input(\"Enter n: \"))\n",
    "\n",
    "print('1 + 2 + ... + n = ', ???)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "**Question**: Why not use `sum` in place of `s`?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Similar problems:\n",
    "\n",
    "  - Compute $n!$\n",
    "  - Compute the product of all elements of an array\n",
    "  - Compute the mean of an array $\\mu = (\\sum^N_{i=1} a_i)/N$\n",
    "  - Compute the variance of an array ($\\sigma^2 = \\sum_{i=1}^N (a_i - \\mu)^2/N$)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Connecting Dots\n",
    "\n",
    "**Exercise**: Write a Python program to find the two smallest numbers of an array and trace it for `a = np.array([1, 4, 3, 8, 2, 4])` and `n = 6`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Iteration is challenging**: a little code yields many operations.\n",
    "\n",
    "**Common features**: \n",
    "- *termination criterion*\n",
    "- *counter variable*\n",
    "- *aggregate variable* modified at each iteration (like the sum `s`)\n",
    "- *placeholder variable* that stores a value (or its location) of interest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## The `break` Clause\n",
    "\n",
    "The `break` clause allows any loop (`while` or, next time `for`) to be terminated any time.\n",
    "\n",
    "```python\n",
    "while condition_1:   # keep going while condition_1 is True\n",
    "    do_something() \n",
    "    if condition_2:  # quit the loop if condition_2 is True\n",
    "        break\n",
    "```        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Simplest example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "while True:\n",
    "    print(\"this line will now be displayed just once!\")\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Numerical Convergence\n",
    "\n",
    "The integer summation problem posed above is one of the canonical examples to use iteration, and it serves as a template for many other tasks.  An equally important example is that of  **numerical convergence**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "The **Taylor series** expansion of $\\sin(x)$ about $x=0$ is given by\n",
    "\n",
    "$$\n",
    "  \\sin(x) = x - \\frac{1}{3!} x^3 + \\frac{1}{5!} x^5 - \\ldots = \\sum^{\\infty}_{j=0} (-1)^j \\frac{x^{2j+1}}{(2j+1)!} \\, .\n",
    "$$\n",
    "\n",
    "Using just the first few terms often gives a good approximation near $x = 0$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "x = np.linspace(0, 3)\n",
    "y = np.sin(x)\n",
    "y1 = x\n",
    "y2 = x - (1/6)*x**3\n",
    "y3 = x - (1/6)*x**3 + (1/120)*x**5\n",
    "plt.plot(x, y, 'k',  x, y1, 'r--', x, y2, 'b-.', x, y3, 'g:')\n",
    "plt.xlabel('x')\n",
    "plt.legend(['$y(x) = \\sin(x)$', '$y_1$', '$y_2$', '$y_3$'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Goal**: Approximate $\\sin(x)$ using a **truncated** expansion of just $n$ terms. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "But, **how good is good enough?** and **what does good mean in this case?**\n",
    "\n",
    "Need to define the **convergence criterion**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**: Write a program to determine n such that $|\\sin(x) - S_n(x)| < 10^{-4}$ for $x = 0.2$ where $S_n(x)$ is the $n$-term Taylor series approximation of $\\sin(x)$ about $x = 0$.  In other words, $S_1(x) = x$, $S_2(x) = x - x^3/6$, etc.  \n",
    "\n",
    "*Hint*: $10^{-4}$ can be written as `0.0001` or `1e-4` or `10**(-4)` in Python."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "**Exercise**: Write a program to determine $n$ such that $\\Big |(1-x)^{-1} - \\sum^{n}_{i=0} x^i \\Big| < 10^{-4}$, and trace the program graphically."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "**Exercise**:  Extend this idea to automate generation of the 2-D contour plot from the Lecture 4 example."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recap\n",
    "\n",
    "You should now be able to:\n",
    "\n",
    "- Use a `while` loop to solve simple problems using iteration\n",
    "- Turn pseudocode and flowcharts into Python code\n",
    "- Use the graphical debugger in Spyder to trace and debug a program with iteration\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "livereveal": {
   "scroll": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
