{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Lecture 5 - Algorithms, flowcharts, and pseudocode. \n",
    " \n",
    "In this lesson, we'll dive right into the basic logic needed to plan one's program, significantly extending the process identified in [Lesson 2](ME400_Lecture_2.ipynb).  We'll examine *algorithms* for several applications and illustrate solutions using **flowcharts** and **pseudocode**.  Along the way, we'll see for the first time the three principal structures in programming logic: **sequence**, **selection**, and **iteration**.  Throughout, specialized syntax (Python or otherwise) is avoided (with the exception of the handy slicing syntax introduced in [Lesson 3](ME400_Lecture_3.ipynb)), but variables and simple operators are used.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Reminders about some Syllabus Policies\n",
    "\n",
    "  - Homework help through discussion board or office hours (*not* email)\n",
    "  - No make ups for labs or in-class activities (drops account for *any* absences)\n",
    "  - Emails should have proper format (\"business casual\"), and a subject with ME 400 helps cut through the noise."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Quick Review: Order of Operations\n",
    "\n",
    "```python\n",
    "x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n",
    "y = (-1**x)*x**2 # expect -1, 4, -9, ...\n",
    "print(y[0] == -1) \n",
    "print(y[1] == 4)\n",
    "```\n",
    "Is this correct?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Given\n",
    "\n",
    "```python\n",
    "z = True and False or True and 'cat' and '' or 'dog'\n",
    "```\n",
    "\n",
    "it is easy to demonstrate that `z == 'dog'` by evaluating the expression, but *why* is it `'dog'`?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Start with:\n",
    "\n",
    "$$\n",
    "    z = \\text{True and False} \\, \\text{or} \\, \\text{True and 'cat' and ''} \\, \\text{or} \\, \\text{'dog'} \n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Use parentheses to show that `and` operations come before `or` operations and that operations are performed from left to right:\n",
    "\n",
    "$$\n",
    "    z = \\Bigg ((\\text{True and False}) \\, \\text{or} \\, \\Big (\\text{(True and 'cat') and ''} \\Big) \\Bigg ) \\, \\text{or} \\, \\text{'dog'} \n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Evaluate the contents *inside* parentheses:\n",
    "\n",
    "$$\n",
    "    z = \\Bigg ((\\text{False}) \\, \\text{or} \\, \\Big (\\text{('cat') and ''} \\Big) \\Bigg ) \\, \\text{or} \\, \\text{'dog'} \n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "$$\n",
    "    z = \\Bigg (\\text{False} \\, \\text{or} \\, \\Big (\\text{'cat' and ''} \\Big) \\Bigg ) \\, \\text{or} \\, \\text{'dog'} \n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "$$\n",
    "    z = \\Big (\\text{False} \\, \\text{or} \\,  (\\text{''}) \\Big) \\, \\text{or} \\, \\text{'dog'} \n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "$$\n",
    "    z = \\Big (\\text{False} \\, \\text{or} \\,  \\text{''} \\Big) \\, \\text{or} \\, \\text{'dog'} \n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "$$\n",
    "    z = \\Big ( \\text{''} \\Big) \\, \\text{or} \\, \\text{'dog'} \n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "$$\n",
    "    z =  \\text{''} \\,\\,  \\text{or} \\,\\, \\text{'dog'} \n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "$$\n",
    "   z = \\text{'dog'}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- *explain the three basic logical structures in programming*\n",
    "- *decompose problems into small, well defined steps*\n",
    "- *describe those steps graphically using flowcharts*\n",
    "- *describe those steps in words using pseudocode*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Key Terms\n",
    "\n",
    "- algorithm\n",
    "- sequence\n",
    "- selection \n",
    "- iteration\n",
    "- counter variable\n",
    "- index variable\n",
    "- condition\n",
    "- conditional statement\n",
    "- loop"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Algorithm\n",
    "\n",
    "An *algorithm* is procedure by which a problem is solved following a certain set of rules.\n",
    "\n",
    "We *implement* algorithms using logical structures: **sequence**, **selection**, and **iteration**.\n",
    "\n",
    "For now, only *pseudocode* and *flowcharts* -- **no Python** until next week!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Sequence \n",
    "\n",
    "Sequence is *basically what we've been doing!*\n",
    "\n",
    "In plain English: **A set of steps, when done in the right order, that gets something done.**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example**: Break down the grade problem into smaller parts and tackle the homework score by developing an appropriate algorithm."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "```octave\n",
    "'''Algorithm for computing homework percentage'''\n",
    "# Get the inputs needed to compute the homework percentage\n",
    "Input hw_scores, number_hw, points_per_hw\n",
    "# Initialize the total homework score    \n",
    "Set total_score to 0\n",
    "# Increment the total homework score by each of the \n",
    "# homework scores.  Assume there are 5 total for brevity.\n",
    "Increase total_score by hw_scores[0]\n",
    "Increase total_score by hw_scores[1]\n",
    "Increase total_score by hw_scores[2] \n",
    "Increase total_score by hw_scores[3]\n",
    "Increase total_score by hw_scores[4]\n",
    "# Determine the total number of points possible\n",
    "Set total_possible to points_per_hw * number_hw\n",
    "# Compute the homework percentage\n",
    "Set hw_percent to 100 * total_score / total_possible\n",
    "# Provide the homework percentage\n",
    "Output hw_percent\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "```\n",
    "digraph G {\n",
    "\tstart [shape=oval];\n",
    "\tinput [label=<Input <I>hw_scores</I>,  <I>number_hw</I>,  <I>points_per_hw</I>>, shape=parallelogram];\n",
    "\tinit [label=<Set <I>total_score </I> to 0>, shape=rectangle];\n",
    "\tinc0 [label=<Increase <I>total_score </I>by <I>hw_scores[0]</I>>, shape=rectangle];\n",
    "\tinc1 [label=<Increase <I>total_score </I> by <I>hw_scores[1]</I>>, shape=rectangle];\n",
    "\tinc2 [label=<Increase <I>total_score </I> by <I>hw_scores[2]</I>>, shape=rectangle];\n",
    "\tinc3 [label=<Increase <I>total_score </I> by <I>hw_scores[3]</I>>, shape=rectangle];\n",
    "\tinc4 [label=<Increase <I>total_score </I> by <I>hw_scores[4]</I>>, shape=rectangle];\n",
    "    possible [label=<Set <I>total_possible </I> to <I>points_per_hw * number_hw</I>>, shape=rectangle];\n",
    "    percentage [label=<Set <I>hw_percent </I> to <I>100 * total_score / total_possible</I>>, shape=rectangle];\n",
    "    output [label=<Output <I>hw_percent </I>>, shape=parallelogram];\n",
    "\tstop [shape=oval];\n",
    "\tstart->input;\n",
    "    input->init;\n",
    "    init->inc0;\n",
    "    inc0->inc1;\n",
    "    inc1->inc2;\n",
    "    inc2->inc3;\n",
    "    inc3->inc4;\n",
    "    inc4->possible;\n",
    "    possible->percentage;\n",
    "    percentage->output;\n",
    "    output->stop;\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "<img src=\"img/homework_sequence2.png\" alt=\"Flowchart for Computing Homework Percentage\" style=\"width: 600px;\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Selection\n",
    "\n",
    "Suppose we computed `hw_percent`, `lab_percent`, `quiz_percent`, and `exam_percent`.  Given the weight of each category, one could, using **sequence** compute a `final_percent`.  But how to assign the letter grade?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Simplest selection: \n",
    "      \n",
    "```html\n",
    "If some condition is true, then \n",
    "    do something.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "\n",
    "Graphically:\n",
    "\n",
    "<img src=\"img/simple_if2.png\" alt=\"Flowchart fragment for a simple conditional statement\" style=\"width: 300px;\"/>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "```octave\n",
    "'''Algorithm to compute the final grade'''\n",
    "# Get the final percentage\n",
    "Input final_percent\n",
    "# Check if the grade is an A\n",
    "If final_percent >= 90 then\n",
    "    Set final_grade to A # Indentation helps tie the statement to the condition\n",
    "\n",
    "...\n",
    "\n",
    "# Provide the final grade\n",
    "Output final_grade\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example** Consider the following pseudocode:\n",
    "\n",
    "```\n",
    "0.  Input n\n",
    "1.  Set m to 0\n",
    "2.  If n is even then\n",
    "3.      Set m to 1\n",
    "4.  If m is odd then\n",
    "5.      Set n to 0\n",
    "6.  Output n\n",
    "```\n",
    "\n",
    "What does it do?\n",
    "Turn it into a flowchart!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Iteration is **Repetition**\n",
    "\n",
    "Think back to the homeworks:\n",
    "\n",
    "```octave\n",
    "Increase total_score by hw_scores[0]\n",
    "Increase total_score by hw_scores[1]\n",
    "Increase total_score by hw_scores[2]\n",
    "Increase total_score by hw_scores[3]\n",
    "Increase total_score by hw_scores[4]\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### The Basic Idea\n",
    "\n",
    "Need language to describe the process of *iterating* through array elements or *repeating* a \"cookie-cutter\" task.\n",
    "\n",
    "Possible ways to describe iteration for the homework problem in English:\n",
    "\n",
    "  - For each score in an array of homework scores, add it to the total score\n",
    "  - While there are still homework scores, add each one to the total score."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "In pseudocode:\n",
    "\n",
    "```octave\n",
    "While the condition is satisfied\n",
    "  Do something\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Graphically:\n",
    "\n",
    "![Flowchart fragment for a simple loop](img/simple_loop.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "```octave\n",
    "'''Algorithm for computing homework percentage'''\n",
    "# Get the inputs needed to compute the homework percentage\n",
    "Input hw_scores, number_hw, points_per_hw\n",
    "# Initialize the total homework score    \n",
    "Set total_score to 0\n",
    "# Increment the total homework score by each of the \n",
    "# homework scores. \n",
    "Set counter = 0\n",
    "While counter < number_hw \n",
    "    Increase total_score by hw_scores[counter]\n",
    "    Set counter = counter + 1\n",
    "# Determine the total number of points possible\n",
    "Set total_possible to points_per_hw * number_hw\n",
    "# Compute the homework percentage\n",
    "Set hw_percent to 100 * total_score / total_possible\n",
    "# Provide the homework percentage\n",
    "Output hw_percent\n",
    "```\n",
    "\n",
    "**What is the iteration condition?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example**: Turn the following flowchart into pseudocode. What is the resulting value of `c`?  \n",
    "![What is the resulting value of `c` in the flowchart](img/lec5_quiz_2.png)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "| step |  `c` |  comment  |\n",
    "|---|---|---|\n",
    "| 0 | |   |\n",
    "| 1  |   |   |\n",
    "| 2  |   |   |\n",
    "| 3  |   |   |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example**: Given the following pseudocode, what are the resulting values of `b` for `n` equal to 4, 5, and 6?\n",
    "\n",
    "```\n",
    "1.  Input n\n",
    "2.  Set a to 1\n",
    "3.  Set b to 1\n",
    "4.  Set i to 2\n",
    "5.  While i < n\n",
    "6.     Set c = b\n",
    "7.     Set b = a + b\n",
    "8.     Set a = c \n",
    "9.     Set i to i+1\n",
    "10. Output b\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "| step |  `n`|  `a` | `b` | `c` | `i` |  comment  |\n",
    "|---|---|---|---|---|---|---|\n",
    "| 0 |  |   |   |   |   |   |\n",
    "| 1     |   |   |   |   |   |\n",
    "| 2  |   |   |   |   |   |   |\n",
    "| 3  |   |   |   |   |   |   |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example**: Develop an algorithm for finding the heaviest rock in a pile of 10 rocks assuming that you are blindfolded, no two rocks have the same mass, and you can tell which of any two rocks is heavier."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recap\n",
    "\n",
    "You should now be able to\n",
    "\n",
    "- *explain the three basic logical structures in programming*\n",
    "- *decompose problems into small, well defined steps*\n",
    "- *describe those steps graphically using flowcharts*\n",
    "- *describe those steps in words using pseudocode*"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  },
  "livereveal": {
   "scroll": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
