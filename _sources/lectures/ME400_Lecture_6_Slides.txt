{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Lecture 6 - Conditional Statements and the Structure of Python Code\n",
    " \n",
    "In this lesson, we turn back to Python and begin the development of more complicated programs.  The emphasis here and in [Lecture 7](ME400_Lecture_7.ipynb) is on the logic of *selection* and its implementation via conditional statements in Python.  Effective use of conditional statements requires a thorough understanding of the relational and logical operators defined in [Lesson 2](ME400_Lecture_2.ipynb)  and the theoretical coverage of selection presented in [Lecture 5](ME400_Lecture_5.ipynb)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Quick Recap of Last Week"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "```\n",
    "0. Input: a and n # here, a is an array with n numbers\n",
    "1. Set s to 0\n",
    "2. Set counter to 0\n",
    "3. While counter < n \n",
    "4.     If counter%2 == 0 then\n",
    "5.         Set s to s + a[counter]\n",
    "6.     Set counter to counter + 1\n",
    "7. Output: s\n",
    "```\n",
    "\n",
    "Task 0.  Trace this program for `a = [1, 2, 3, 4]` (so `n = 4`), keeping track of all variables.\n",
    "\n",
    "> `step  line a      n    s  counter   comment`\n",
    "\n",
    "Task 1.  Describe in one complete sentence what this does.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- explain the importance of indentation in Python programs\n",
    "- write programs with conditional statements \n",
    "- predict the outcome of programs with `if`, `else`, and `elif` statements"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## The Simplest `if`\n",
    "\n",
    "Recall the basic conditional statement from [Lecture 5](ME400_Lecture_5.ipynb), repeated graphically here:\n",
    "\n",
    "\n",
    "<img src=\"img/simple_if.png\" alt=\"Flowchart fragment for a simple conditional statement\" width=\"500\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "In pseudocode, that same statement could be written as\n",
    "```octave\n",
    "If the condition is satisfied then\n",
    "    Do something\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example**: Write a program that gets an integer from the user and states if the number is positive using\n",
    "\n",
    "  1. pseudocode\n",
    "  2. a flowchart\n",
    "  3. Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "number = int(input('enter your number '))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Rules of the `if` statement\n",
    "\n",
    "```python\n",
    "if condition:\n",
    "    a = 1\n",
    "    c = a*2\n",
    "    # and any other things to be done when condition is True\n",
    "```\n",
    "\n",
    "1. The `if` statement begins with the **keyword** `if`. \n",
    "2. The *condition* is `bool` or can be converted to a `bool`\n",
    "3. The `:` after `condition` is **required**\n",
    "4. The statements to be executed when `condition == True` **must be indented the same amount**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example**: Compute the final letter ME 400 grade given a final percentage."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "'''Algorithm to compute the final grade'''\n",
    "# Get the final percentage\n",
    "final_percentage = float(input('Enter final percentage: ')) \n",
    "# Check if the grade is an A\n",
    "if final_percentage >= 90\n",
    "    final_grade = 'A' \n",
    "# Check if the grade is a B\n",
    "\n",
    "# Check if the grade is a C\n",
    "\n",
    "# Check if the grade is a D\n",
    "\n",
    "# Check if the grade is an F\n",
    "\n",
    "# Provide the final grade\n",
    "print(\"Final grade: \", final_grade)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## The `else` Clause\n",
    "\n",
    "The basic `if` statement lets us selectively execute lines of code given some condition."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "The `else` clause allows us to provide alternate code when the condition is not satisfied."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example**: Modify the positive-number program above to state also when the number is nonpositive using (1) only `if` statements and (2) `if` with `else`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "number = int(input('enter your number '))\n",
    "if number > 0:\n",
    "    print(\"the number is positive\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## The `elif` Clause\n",
    "\n",
    "The basic `if` statement lets us selectively execute lines of code given some condition.\n",
    "\n",
    "The `else` clause allows us to provide alternate code when the condition is not satisfied."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "The `elif` clause lets us select from more than just two options."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "```\n",
    "If condition 1 is satisfied then\n",
    "    do something 1\n",
    "Otherwise if condition 2 is satisfied then\n",
    "    do something 2\n",
    "Otherwise\n",
    "    do something else\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "![Flowchart for if/elif/else](img/if_elif_else.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example**: Modify the positive/nonpositive program for positive, negative, and zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "number = int(input('enter your number '))\n",
    "if number > 0:\n",
    "    print(\"the number is positive\")\n",
    "elif number <= 0:\n",
    "    print(\"the number is nonpositive\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Examples**: *1, 2, 3* and *months*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "**Example in Spyder**\n",
    "\n",
    "Two new functions for your toolboxes: `np.genfromtxt` and `np.sort`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recap\n",
    "\n",
    "You should now be able to\n",
    "\n",
    "- explain the importance of indentation in Python programs\n",
    "- write a program with conditional statements containing `if`, `else`, and `elif`\n",
    "- predict the outcome of a Python program with `if`, `else`, and `elif` statements"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "livereveal": {
   "scroll": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
