{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Lecture 9 - More on Loops\n",
    " \n",
    "In [Lecture 8](ME400_Lecture_8_Slides.ipynb), the use of `while` loops in Python introduced to solve problems requiring iteration.  The `while` loop structure in Python is very similar to structure introduced via pseudocode in\n",
    "[Lecture_5](ME400_Lecture_5_Slides.ipynb).  In this lecture, an additional `for`-loop construct is introduced, which reduces the amount of \"bookkeeping\" required in some cases.  All loops can also be *nested*, which provides substantial flexibility when processing data, defining multidimensional arrays, and performing similar, potentially multidimensional tasks."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Quick announcements:\n",
    "  - You do not need to produce a checkerboard array for HW4 \n",
    "  - Exam on Friday (old exams posted, one with a solution)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Quick Review - Do I have ME 400 Lecture Today?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "%reset # remember, this clears all variables\n",
    "today = input(\"Enter the day: \")\n",
    "if today == 'Monday':\n",
    "    i_have_me400 = True\n",
    "elif today == 'Wednesday':\n",
    "    i_have_me400 = True\n",
    "print(\"Do I? \", i_have_me400)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- Explain how to converge to a numerical answer given some series (Taylor, geometric, etc.)\n",
    "- Use a `for` loop to solve simple problems using iteration\n",
    "- Use nested `for` loops to fill the elements of a multidimensional array.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Numerical Convergence\n",
    "\n",
    "The integer summation problem covered last time is one of the canonical examples to use iteration, and it serves as a template for many other tasks.  An equally important example is that of  **numerical convergence**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "The **Taylor series** expansion of $\\sin(x)$ about $x=0$ is given by\n",
    "\n",
    "$$\n",
    "  \\sin(x) = x - \\frac{1}{3!} x^3 + \\frac{1}{5!} x^5 - \\ldots = \\sum^{\\infty}_{i=0} (-1)^i \\frac{x^{2i+1}}{(2i+1)!} \\, .\n",
    "$$\n",
    "\n",
    "Using just the first few terms often gives a good approximation near $x = 0$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Goal**: Approximate $\\sin(x)$ using a **truncated** expansion."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "But, **how good is good enough?** and **what does good mean in this case?**\n",
    "\n",
    "Need to define the **convergence criterion**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**: Write a program to determine n such that $|\\sin(x) - S_n(x)| < 10^{-4}$ for $x = 0.2$ where $S_n(x)$ is the $n$-term Taylor series approximation of $\\sin(x)$ about $x = 0$.  In other words, $S_1(x) = x$, $S_2(x) = x - x^3/6$, etc.  \n",
    "\n",
    "*Hint*: $10^{-4}$ can be written as `0.0001` or `1e-4` or `10**(-4)` in Python."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "**Exercise**: Revisit Lecture 4's examples and automate with loops!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## The `for` Loop\n",
    "\n",
    "Consider this program to print each element of an array `a`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "# print out the elements of an array using a while loop\n",
    "import numpy as np\n",
    "a = np.array([1, 1, 2, 3, 5, 8, 13])\n",
    "n = len(a)\n",
    "i = 0\n",
    "while i < n:    # always remember the :\n",
    "    print(a[i]) # indented 4 spaces\n",
    "    i = i + 1   # also indented 4 spaces"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "The same thing can be accomplished with a `for` loop:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "# print out the elements of an array using a for loop\n",
    "import numpy as np\n",
    "a = np.array([1, 1, 2, 3, 5, 8, 13])\n",
    "n = len(a)\n",
    "\n",
    "    print(a[i]) # indented 4 spaces\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "The basic `for` loop structure:\n",
    "\n",
    "```python\n",
    "for item in sequence:\n",
    "   do cookie-cutter piece of work\n",
    "```\n",
    "\n",
    "Here, `sequence` is a NumPy `array`, a `range`, or any other value of a *sequential type*, and `item` will be set equal to *every single element of sequence* in order."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### `range`\n",
    "\n",
    "Similar to `np.arange`, but restricted to integers:\n",
    "```python\n",
    "range(start, stop, stride)\n",
    "```\n",
    "where `start` is the first value, `stop` is the exclusive upper bound, and `stride` is the step between values (default is 1)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**: Use a `for` loop to add `1 + 2 + ... + n`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Some differences between `while` and `for`:\n",
    "- `while` requires initialization of the counter variable `i`, but `for` does not.\n",
    "- `while i < n` becomes `for i in range(0, n)`\n",
    "- `while` is based on a condition involving `i`, but `for` is based on a fixed number of values for `i`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Nested `for` loops\n",
    "\n",
    "Just like `if` statements can be nested, so, too, can `for` (and `while`) loops be nested.  While nested `if` statements can always be written as (potentially much) more complicated, single statements, there are some tasks for which nested loops are truly required---but I have not proven that!\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**: Use nested `for` loops to find the sum of the elements of $5\\times 5$ array of random numbers.  (At home: repeat with `while` loops!)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**: Use nested `for` loops to populate an $8 \\times 8$ checkboard with 0's and 1's."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**: The cumulative sum of an array is another array of the same length whose $i$th element is defined as\n",
    "\n",
    "$$\n",
    "  c_i = \\sum^i_{j=0} a_j \\, .\n",
    "$$\n",
    "\n",
    "For example, the cumulative sum of an array of three ones has the elements 1, 2, and 3.\n",
    "\n",
    "Use nested `for` loops to compute the cumulative sum of an array of 5 random numbers.  Can it be done with just one loop?  (At home: repeat with two or one `while` loops!)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**: Starting with `A = np.zeros((5, 5))`, use two loops to produce\n",
    "```python\n",
    "array([[ 1,  2,  3,  4,  5],\n",
    "       [ 0,  6,  7,  8,  9],\n",
    "       [ 0,  0, 10, 11, 12],\n",
    "       [ 0,  0,  0, 13, 14],\n",
    "       [ 0,  0,  0,  0, 15]])\n",
    "```\n",
    "(At home: repeat this with `while` loops!)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recap\n",
    "\n",
    "By now, you should be able to\n",
    "\n",
    "- Use a `for` loop to solve simple problems using iteration\n",
    "- Use nested `for` loops to fill the elements of a multidimensional array.\n",
    "- Use the graphical debugger in Spyder to trace and debug a program with iteration"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
