{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Euler's Method for Initial-Value Problems\n",
    "\n",
    "## Overview, Objectives, and Key Terms\n",
    " \n",
    "In this lecture, we review the basics of *first-order*, *ordinary differential equations* (ODEs) and their role in *initial value problems* (IVPs).  Engineering is full of such IVPs, and we can tackle them using the finite-difference approximations and nonlinear solvers we've already seen.\n",
    "\n",
    "\n",
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- Define first-order IVPs given engineering input (e.g., a description of some system)\n",
    "- Solve first-order IVPs analytically (prior knowledge in part)\n",
    "- Solve first-order IVPs numerically using the forward-Euler and backward-Euler methods.\n",
    "\n",
    "### Prerequisites\n",
    "\n",
    "You should already have a basic comprehension of ODEs, especially IVPs, at the level covered in MATH 340 (now a pre-requisite for this course).  That includes deducing general solutions, applying initial conditions, and determining complete solutions.  In fact, you should also know something about Laplace transforms and Euler's method, the latter technique which is the focus of this lesson.  Specifically, you should, given a day or two of review, be able to sit down and complete a good chunk of an exam like [this one](https://www.math.ksu.edu/courses/exam-archive/math240/Math240fxS17.pdf) at a passing level.  If that is *not* the case, see an instructor in office hours and/or begin to review the [MATH 340 textbook](https://www.math.ksu.edu/math240/book/).\n",
    "\n",
    "\n",
    "### Key Terms\n",
    "\n",
    "- differential equation\n",
    "- ordinary\n",
    "- linear\n",
    "- ODE\n",
    "- initial value problem\n",
    "- boundary value problem"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Differential Equations\n",
    "\n",
    "A *differential equation* is any equation in which an unknown function $f$ appears with one of more of its derivatives.  When $f$ is a function of only one variable, the derivatives are *ordinary* (as opposed to *partial*), and the equation is an *ordinary differential equation* (ODE).  In compact notation, such an equation may be written\n",
    "\\begin{equation}\n",
    "    \\mathcal{L}f(x) = q(x) \\, ,\n",
    "\\end{equation}\n",
    "where $\\mathcal{L}$ is a differential operator.  If $\\mathcal{L}$ contains only *linear combinations* of $f(x)$ and its derivates, then $\\mathcal{L}$ is a *linear operator*, and the equation is a *linear* ODE.  If $q(x) = 0$, the equation is *homogeneous* and is otherwise *inhomogeneous*.  If the highest derivative of $f(x)$ present in $\\mathcal{L}f$ is $n$ (i.e., $d^n f/dx^n$), then the equation is called an *n*th-order equation.\n",
    "\n",
    "Examples of linear operators include $\\mathcal{L}f = \\frac{df}{dx}$ and $\\mathcal{L}f = a(x) \\frac{d^2f}{dx^2} + b(x)$, where $a(x)$ and $b(x)$ are arbitrary functions of $x$ (but not of $f(x)$).  For comparison, a nonlinear example is $\\mathcal{L}f = \\left ( \\frac{df}{dx} \\right )^2 - \\sqrt{f(x)}$, which includes nonlinear functions of $f$ and its first derivative.\n",
    "\n",
    "Our focus here and the next module is entirely on *ordinary differential equations* (both linear and nonlinear) and their solution by analytic and numerical techniques."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Whence Comes $y'+py=q$?\n",
    "\n",
    "Consider problems of the form\n",
    "\n",
    "$$\n",
    "    \\frac{dy}{dt} + p(t)y(t) = q(t) \\, , \\qquad y(0) = y_0 \\, .\n",
    "$$\n",
    "\n",
    "This is the canonical way to represent a **first-order**, **linear**, **initial-value problem** (IVP). It is first order because there is only a first derivative.  It is an initial-value problem because the unknown (here, $y(t)$) is specified at some \"initial\" time.  It is linear because $p(t)$ does not depend on $y(t)$.\n",
    "\n",
    "A first-order IVP can be used to represent of a number of physical phenomena.  The first that comes to mind (to me, as a nuclear engineer) is [radioactive decay](https://en.wikipedia.org/wiki/Exponential_decay) with external production, usually written $N' = -\\lambda N(t) + R(t)$, where $N(t)$ is the number of radioactive nuclei at time $t$, $\\lambda$ is the decay constant (with units of inverse seconds), and $R(t)$ is the number of new nuclei born per second.  The time rate of change of $N(t)$ is a balance of those new nuclei from $R(t)$ against the number $-\\lambda N(t)$ lost by decay.  For sufficiently long times, $dy/dt \\to 0$, and $y = R/\\lambda$, a *steady state* in which losses are exactly balanced by gains.\n",
    "\n",
    "An equally good example is the case of an object of mass $m$ in [free fall through a viscuous medium](http://hyperphysics.phy-astr.gsu.edu/hbase/lindrg.html), e.g., the atmosphere.  If some object is held a distance above the earth and dropped, its acceleration at any point in time is related to the net forces acting on the body.  These forces include the gravitational force $F_g = -m g$ (i.e., downward) and the air resistance $F_r$.  A simple resistance model is $F_r = cv$, where $c$ is a (positive) constant and $v$ is the velocity directed toward Earth. Hence,\n",
    "the downward force is \n",
    "\n",
    "$$\n",
    "  F(t) = -cv(t) + m g \\, .\n",
    "$$\n",
    "\n",
    "From Newton's second law, $F = ma$, so we have\n",
    "\n",
    "$$\n",
    "    ma(t) = m \\frac{dv}{dt} = -cv(t)  + mg \\, ,\n",
    "$$\n",
    "\n",
    "or\n",
    "\n",
    "$$\n",
    "    v' = -\\frac{c}{m} v(t) + g \\, .\n",
    "$$\n",
    "\n",
    "The positive $c/m$ has the same effect as a positive $\\lambda$ in radioactive decay: the larger the velocity $v$, the larger the retardation force $cv$ (just like the larger the number of nuclei $N$, the larger the number $\\lambda N$ decaying per unit time).  For the free-fall case, the steady-state condition $v'=0$ has a special name: *terminal velocity*.  \n",
    "\n",
    "Lots of phenomena have this sort of behavior, this natural *negative feedback*, and such feedback can help us when we solve these problems numerically.  In those cases where the feedback is *positive*, we expect the number of nuclei to *grow* more and more (or, equivalently, for a falling object to keep accelerating toward earth).  The former happens when pythons (or neutrons) multiply in nature; thankfully, the [hail of northeastern Kansas](https://en.wikipedia.org/wiki/April_10%E2%80%9311,_2001_tornado_outbreak#Tri-state_hailstorm) does reach a terminal velocity.  Oh, and I'm not joking about pythons: combine the  [Malthusian model](https://en.wikipedia.org/wiki/Malthusian_growth_model) with the fact there is an artificial source term due to pet owners releasing their larger-than-expected pets into the [Florida Everglades](https://en.wikipedia.org/wiki/Burmese_pythons_in_Florida)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "**Exercise**:  Solve $\\frac{dy}{dt} = ay(t)$ with $y(0) = y_0$.\n",
    "\n",
    "*Solution*: Rearrange the equation to be \n",
    "\n",
    "$$\n",
    "  \\frac{1}{y}dy = a dt \\, ,\n",
    "$$\n",
    "\n",
    "and then integrate to obtain\n",
    "\n",
    "$$\n",
    "   \\ln(y) = a t + C' \\, .\n",
    "$$\n",
    "\n",
    "Here, $C'$ is an arbitrary integration constant.  Exponentiation of both sides results in\n",
    "\n",
    "$$\n",
    "  y(t) = e^{at + C'} = C e^{at} \\, ,\n",
    "$$\n",
    "\n",
    "where $C = e^{C'}$ is still an arbitrary constant. \n",
    "\n",
    "So far, this is just *integral calculus*.  To solve the given IVP, we need to *apply the initial condition* (IC).  Specifically, we need to specify $C$ that satisfies $y(0) = C e^{0} = y_0$.  Clearly, $C = y_0$.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Solve $\\frac{dy}{dt} + py(t) = q$ subject to $y(0) = y_0$ where $p$ and $q$ are constant.\n",
    "\n",
    "*Solution*: This standard problem is solved by use of an *integration factor*.  Sure, there is a formula you can memorize, but I have a bad memory.  What I do remember is that we want to find some integration factor $\\mu(t)$ such that\n",
    "\n",
    "$$\n",
    "  \\frac{d}{dt}[\\mu(t) y(t)]  = \\mu(t) q\\, .\n",
    "$$\n",
    "\n",
    "*Why*?  We've turned the original problem into one for which both sides ($\\mu q$ and $\\frac{d}{dt}[\\mu y]$) can be directly integrated  like we did for $y'=ay$!  Let's apply the product rule:\n",
    "\n",
    "$$\n",
    "\\frac{d}{dt}[\\mu(t) y(t)] = \\frac{d\\mu}{dt} y(t) + \\mu(t) \\frac{dy}{dt} = \\mu(t) q \\, .\n",
    "$$\n",
    "\n",
    "By comparison to the original equation, we need\n",
    "\n",
    "$$\n",
    "   \\frac{d\\mu}{dt} y(t) + \\mu(t) \\frac{dy}{dt} = \\mu(t) \\frac{dy}{dt} + \\mu(t) py(t) \\, ,\n",
    "$$\n",
    "\n",
    "or \n",
    "\n",
    "$$\n",
    " \\frac{d\\mu}{dt} =  \\mu(t) p \\longrightarrow \\frac{d\\mu}{\\mu} = p dt \\longrightarrow \\ln \\mu =  p t \n",
    "$$\n",
    "\n",
    "or\n",
    "\n",
    "$$\n",
    "   \\mu(t) = e^{pt} \\, .\n",
    "$$\n",
    "\n",
    "Finally, integrate the IVP from $0$ to $t$, making sure to use the dummy variable $t'$ inside the integrals:\n",
    "\n",
    "$$\n",
    "\\begin{split}\n",
    "  \\int^{t}_{0} \\frac{d}{dt'}[\\mu(t') y(t')] dt' &= \\int^{t}_{0} \\mu(t') q dt' \\\\\n",
    "  \\int^{t}_{0} \\frac{d}{dt'}[e^{pt'} y(t')] dt' &= \\int^{t}_{0} e^{pt'} q dt' \\\\\n",
    "  e^{pt} y(t) - e^{0}y(0) &= \\frac{q}{p} [e^{pt}-e^{0}] \\\\\n",
    "  e^{pt} y(t) - y(0) &= \\frac{q}{p} [e^{pt}-1] \\, .\n",
    "\\end{split}\n",
    "$$\n",
    "\n",
    "A bit of rearranging then leads to \n",
    "\n",
    "$$\n",
    "  y(t) = \\frac{q}{p} [1 - e^{-pt}] + y(0)e^{-pt} \\, .\n",
    "$$\n",
    "\n",
    "Of course, this is the result some of you might have memorized, but working through it with the goal of being able to *integrate the equation directly* might shed some new light on (or simply remind you of) the origin of the formula.  \n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**: Check that the solution found for $y' + py = q$ actually solves the IVP by substitution of the result into the original equation.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Consider  $v' = -\\frac{c}{m} v(t) + g$.  Can you determine the *terminal velocity* (i.e., the velocity obtained when the falling object is no longer accelerating) *without* solving the IVP?  If not, go ahead and solve the IVP.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**: My kid *hates* hot food, so if I make him my (absolute delicious grilled-cheese sandwich with 100% real Wisconsin cheese [of course]), I've got to let it cool down to approximately room temperature (say 70 ${}^{\\circ}$F).  If immediately after grilling it, the sandwich is 150 ${}^{\\circ}$F, and  5 minutes later, it is 100${}^{\\circ}$, **how much longer do I have to let it cool?**  Assume that Newton's law of cooling, $T' = k(T-T_m)$, applies.  (Hint: you *do* have enough information to solve this problem.)\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**: Radio-carbon dating is a technique used to determine how old fossils are.  The technique is based on the fact that the radioactive isotope C-14 is produced in the atmosphere at an approximately constant rate.  Living, breathing creatures have C-14 at levels consistent with the atomosphere.  Dead, fossilized creatures have C-14 levels that decrease over time.  The *half life* of C-14 is about 5600 years, meaning that every 5600 years, the amount of C-14 in the fossil will decrease by half.  Use this number and the simple model $N' = -\\lambda N(t)$ (where $N$ represents the amount of C-14) to determine $\\lambda$.  Then, determine how old a fossil must be if its C-14 concentration is only 1/100 of that of a living creature.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Try solving the *nonlinear* logistics equation: $y' = y(t)[a - by(t)]$ with $y(0) = y_0$.   This model extends the exponential growth model $y'/y = a$ by  $y'/y = a - by$.  The $-by$ term represents some sort of inhibitor for unbounded growth.  Think about it: unbounded growth would require unbounded resources.  In the real world, those resources are not available, and so there tends to be muted growth as populations become very large.  This reduction in the grown rate can be modeled as being proportional to the population itself, leading to this nonlinear model.  Plot the solution for $y(0) = 1$, $a = 1$, and $b = 0$ and $b = 1$.  Notice a difference?\n",
    "\n",
    "***\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The General Problem $y' = f(y(t), t)$\n",
    "\n",
    "The general form of a first-order, ordinary differential equation is\n",
    "\n",
    "$$\n",
    "  \\frac{dy}{dt} = f(y(t), t) \\, ,\n",
    "$$\n",
    "\n",
    "where $f(y(t), t)$ is a function of both $t$ and $y(t)$.  For the standard linear problem with constant coefficients ($y' + py = q$), we may write\n",
    "\n",
    "$$\n",
    "  \\frac{dy}{dt} = f(y(t), t) \\qquad \\text{where} \\qquad f(y(t), t) = q - py(t) \\, .\n",
    "$$\n",
    "\n",
    "If $f(y(t), t)$ is a *linear* function of $f(t)$, then the IVP is also linear; otherwise, the IVP is nonlinear.\n",
    "\n",
    "\n",
    "For this and the next lesson, the general form $y' = f(y(t), t)$ will be used exclusively."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## There Once was a Man Named Euler\n",
    "\n",
    "[Leonhard Euler](https://en.wikipedia.org/wiki/Leonhard_Euler) was a prolific mathematician, perhaps second only to [Carl Gauss](https://en.wikipedia.org/wiki/Carl_Friedrich_Gauss).  I point him out because the simplest (and probably best known) approach for solving $y' + py = q$ has his name.  (Point of trivia: he's buried in St. Petersburg, I was quite surprised to learn while strolling through an old cemetery).\n",
    "\n",
    "The method bearing his name requires the numerical differentiation we learned previously.  Specifically, we need one of the first-order, finite-difference approximations for $dy/dt$.  You'll recall those are the *forward difference*\n",
    "\n",
    "$$\n",
    "    \\frac{dy}{dt} = \\frac{y(t+\\Delta)-y(t)}{\\Delta} + \\mathcal{O}(\\Delta) \\, ,\n",
    "$$\n",
    "\n",
    "and the *backward difference*\n",
    "\n",
    "$$\n",
    "    \\frac{dy}{dt} = \\frac{y(t)-y(t-\\Delta)}{\\Delta} + \\mathcal{O}(\\Delta) \\, .\n",
    "$$\n",
    "\n",
    "If we substitute the forward difference into the general IVP (i.e., $y' = f(y(t),t)$), we find\n",
    "\n",
    "$$\n",
    "    \\frac{y(t+\\Delta)-y(t)}{\\Delta} = f(y(t), t) + \\mathcal{O}(\\Delta) \\, ,\n",
    "$$\n",
    "\n",
    "and by isolating $y(t+\\Delta)$ on the left, we have\n",
    "\n",
    "$$\n",
    "    y(t+\\Delta) = \\Delta f(y(t), t) + y(t)  + \\mathcal{O}(\\Delta^2)  \\, .\n",
    "$$\n",
    "\n",
    "In other words, if we know the value of $y(t)$ at time $t$, then we can estimate its values at the future time $t+\\Delta$.  We only need *old* information, the information at time $t$.  This is called the *forward Euler* method.  We march forward in time using only old information.  \n",
    "\n",
    "Alternatively, substitute the *backward difference* into the IVP to find\n",
    "\n",
    "$$\n",
    "    y(t) = \\Delta f(y(t), t) + y(t-\\Delta)  + \\mathcal{O}(\\Delta^2)  \\, .\n",
    "$$\n",
    "\n",
    "To compute $y(t)$, we still need *some* old information, and in this case, that old information is $y(t-\\Delta)$.  However, the value of $y(t)$ at time $t$ *also depends on itself* through the term $f(y(t), t)$.  This dependence can make the *backward Euler* method a bit more challenging to apply, but as we'll see below, we'll get a numerical solution with improved *stability*.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Consider $y' = q - py(t)$ where $p$ and $q$ are constant.  Given the value of $y(t_0)$, determine $y(t_0+\\Delta)$ using  the *forward Euler* method.\n",
    "\n",
    "*Solution*: From above, we have \n",
    "\n",
    "$$\n",
    "\\begin{split}\n",
    "y(t_0 + \\Delta) &= \\Delta f(y(t_0), t_0) + y(t_0) \\\\\n",
    "                &= \\Delta(q - py(t_0)) + y(t_0) \\\\\n",
    "                &= \\Delta q + [1 - \\Delta p]  y(t_0) \\, .\n",
    "\\end{split}\n",
    "$$\n",
    "\n",
    "**Exercise**:  Consider $y' = q - py(t)$ where $p$ and $q$ are constant.  Given the value of $y(t_0)$, determine $y(t_0+\\Delta)$ using  the *backward Euler* method.\n",
    "\n",
    "*Solution*: From above, we have\n",
    "\n",
    "$$\n",
    "y(t) = \\Delta f(y(t), t) + y(t-\\Delta) \\, .\n",
    "$$\n",
    "\n",
    "Substitute $t = t_0 + \\Delta$ into this equation to find\n",
    "\n",
    "$$\n",
    "\\begin{split}\n",
    "y(t_0 + \\Delta) &= \\Delta f(y(t_0+\\Delta), t_0+\\Delta) + y(t_0) \\\\\n",
    "                &= \\Delta(q - py(t_0+\\Delta)) + y(t_0) \\, . \\\\\n",
    "\\end{split}\n",
    "$$\n",
    "\n",
    "By isolating $y(t_0+\\Delta)$ on the left, we find\n",
    "\n",
    "$$\n",
    "[1 + \\Delta p] y(t_0 + \\Delta)   =  \\Delta q + \\Delta y(t_0) \\, ,\n",
    "$$\n",
    "\n",
    "and, hence,\n",
    "\n",
    "$$\n",
    " y(t_0 + \\Delta)   = \\frac{ \\Delta q + \\Delta y(t_0)}{1 + \\Delta p} \\, .\n",
    "$$\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**: Consider $y' = q - p\\sqrt{y(t)}$ where $p$ and $q$ are constant.  Given the value of $y(t_0)$, determine $y(t_0+\\Delta)$ using  the *backward Euler* method.\n",
    "\n",
    "*Solution*: The basic process is the same as the last example, but we cannot isolate $y(t_0+\\Delta)$ on the left-hand side.  Rather, what results is the following, nonlinear equation:\n",
    "\n",
    "$$\n",
    " \\overbrace{y(t_0 + \\Delta) + \\Delta p\\sqrt{y(t_0+\\Delta)} - \\Delta q -  y(t_0) = 0}^{g(y(t_0+\\Delta))\\,=\\, 0} \\, .\n",
    "$$\n",
    "\n",
    "To determine $y(t_0+\\Delta)$ requires the root is found.  Here, the problem is a quadratic (note that $ay + by^{1/2} + c$ is equivalent to $ax^2 + bx + c$ for $x^2 = y$).\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## Chopping Up Time\n",
    "\n",
    "To determine $y(t)$ at multiple times, we must divide time into discrete points starting from the initial time $t_0$.  If a fixed time step $\\Delta$ is used, then $y$ is now evaluated at the points $t_0, t_0+\\Delta, t_0+2\\Delta, \\ldots$, or\n",
    "\n",
    "$$\n",
    "    t_n = t_0 + n\\Delta, \\qquad n = 0, 1, 2, \\ldots\n",
    "$$\n",
    "\n",
    "We could allow for a $\\Delta$ that changes, but we'll keep it fixed for simplicity and leave the fancy stuff to SciPy in the next lesson.  With this notation, the forward Euler method can be written as\n",
    "\n",
    "$$\n",
    "    y_{n+1} =  \\Delta f(y_n, t_n) + y_n \\, , \\qquad n = 0, 1, 2, \\ldots\n",
    "$$\n",
    "\n",
    "while the backward Euler method can be written as\n",
    "\n",
    "$$\n",
    "    y_{n+1}  = \\Delta f(y_{n+1}, t_{n+1}) + y_n \\, , \\qquad n = 0, 1, 2, \\ldots\n",
    "$$\n",
    "\n",
    "How high should $n$ go?  It depends on how long into the future (taking $t$ to represent time) we wish to evaluate the solution.  Let that future time be denoted $T$, and let the number of steps we wish to take be denoted $N$.  Consequently, $\\Delta = (T-t_0)/N$.  We'll always start at $t=0$, so $\\Delta = T/N$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "**Exercise**:  Solve $y' + y(t) = 10$ for $y(0) = 0$, $t \\in [0, 10]$, and $N=25$ with the forward-Euler method.  Plot the numerical result along with the analytic solution $y(t) = 10 - 10e^{-t}$. \n",
    "\n",
    "*Solution*: First, rearrange to get $y' = f(y(t), t) = 10 - y(t)$.  The exact solution can be found using the integration-factor technique shown in a solved exercise above.  The rest can then be done in code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nSUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f8bb893e0f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "N = 25                      # number of steps beyond the IC\n",
    "t = np.linspace(0, 10, N+1) # +1 to include IC\n",
    "Delta = t[1]-t[0]           # constant time step\n",
    "y = np.zeros(N+1)           # +1 to include IC\n",
    "y[0] = 0.0                  # set the IC\n",
    "\n",
    "for i in range(0, 25):\n",
    "    f_i = 10.0 - y[i]          # define f(y_i, t_i)\n",
    "    y[i+1] = Delta*f_i + y[i]  # forward Euler step\n",
    "    \n",
    "y_exact = 10 - 10*np.exp(-t) # exact solution\n",
    "\n",
    "plt.plot(t, y, '-k.',t, y_exact, 'r--')\n",
    "plt.legend(['forward euler', 'exact'])\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('y(t)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "**Exercise**: Repeat the last exercise using the backward Euler.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Use either backward Euler or forward Euler to solve the last example for $\\Delta = 10/25$, $10/250$, and $10/2500$.  How does the *absolute error* in $y(10)$ change with $\\Delta$?  Does that seem reasonable?\n",
    "\n",
    "***\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Finish the following function definition:\n",
    "\n",
    "```python\n",
    "\n",
    "def forward_euler(f, y0, t) :\n",
    "    \"\"\"Solves y' = f(y(t), t) using forward Euler at the given times.\n",
    "    \n",
    "       Inputs:\n",
    "         f  - right-hand side function (callable function)\n",
    "         y0 - initial value of y (float)\n",
    "         t  - times at which to compute y(t), including t0, (NumPy array)\n",
    "         \n",
    "       Returns:\n",
    "         y  - values of y at each time step (NumPy array)\n",
    "    \"\"\"\n",
    "\n",
    "    return y\n",
    "```\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**: Implement backward Euler following the exercise above.  Note, because $f(y(t), t)$ can in general be nonlinear, you'll need to incorporate a root-finding algorithm, e.g.,  bisection or Newton.  Alternatively, use `fsolve`.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Apply forward Euler *by hand* to the following IVPs to approximate $y(1)$ using a step size $\\Delta = 0.2$:\n",
    "  1. $y' = y$ for $y(0) = 1$. \n",
    "  2. $y' = 2ty$ for $y(0) = 1$\n",
    "  3. $y' = -y/10 + 1$ for $y(0) = 0$.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**: Repeat the previous exercise but use backward Euler.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Consider $y' = y$, $y(0) = 1$.  Of course, the solution is $y(x) = e^x$.  Let $\\Delta = 1/N$ and $x_i = \\Delta i$, where $N$ is some integer.  If $y_i$ is the approximation of $y(x)$ at $x = x_i$, then prove that $\\lim_{N\\to \\infty} y_N = e$ for both forward Euler and backward Euler.\n",
    "\n",
    "***\n",
    "\n",
    "\n",
    "**Exercise**:  Consider the IVP $y' = f(t, y(t))$ subject to $y(0) = y_0$.  Here, $f(t, y(t))$ can be any function of $t$ or $y(t)$.  Examples include $f(t, y(t)) = ay + bt$ and $f(t, y(t)) = a y(t)^2$.  The latter case leads to a *nonlinear* IVP.  Given the initial condition, write down how you would determine $y(\\Delta)$ using (a) forward Euler and (b) backward Euler.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Consider the following twist on Euler's method for $\\frac{dy}{dt} = f(t)$ using fixed time steps $\\Delta$:\n",
    "\n",
    "$$\n",
    "  \\tilde{y}_{n+1} = y_n + \\Delta f(t_n)\n",
    "$$\n",
    "\n",
    "and\n",
    "\n",
    "$$\n",
    "  y_{n+1} = y_n + \\frac{\\Delta}{2} [f(t_n) + \\tilde{f}(t_{n+1})] \\, .\n",
    "$$\n",
    "\n",
    "This is an example of a [multi-step method](https://en.wikipedia.org/wiki/Linear_multistep_method) and belongs to the famous [Runge-Kutta](http://mathworld.wolfram.com/Runge-KuttaMethod.html) family of methods.  This particular version is sometimes called [Heun's method](https://en.wikipedia.org/wiki/Heun%27s_method). \n",
    "\n",
    "Your task is to write a function `heun_method(f, y0, t)` where `f` is a callable function, `y0` is the initial condition, and `t` is an array of times at which the solution is to be computed.\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A Look at Errors and Stability (Optional)\n",
    "\n",
    "Consider $y' = 2 - y$ with $y(0) = 1$,  the solution of which is $y(t) = 2 - e^{-t}$.  Solution of the same problem using forward Euler and either 25 or 100 points over $t\\in [0, 10]$ leads to the following:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nKeWG/j+gx8apEJ8zJgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f8b955a6780>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "t25 = np.linspace(0, 10, 26)\n",
    "t100 = np.linspace(0, 10, 101)\n",
    "y25 = np.zeros(26); y25[0] = 1.0\n",
    "y100 = np.zeros(101); y100[0] = 1.0\n",
    "for i in range(25):\n",
    "    y25[i+1] = (10/25.0)*(2.0 - y25[i]) + y25[i]\n",
    "for i in range(100):\n",
    "    y100[i+1] = (10/100.0)*(2.0 - y100[i]) + y100[i]\n",
    "yexact = 2 - np.exp(-t100)\n",
    "plt.plot(t25, y25, 'k-', t100, y100, 'b-.', t100, yexact, 'r--')\n",
    "plt.legend(['$N=25$', '$N=100$', 'exact'])\n",
    "plt.xlabel('t')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Certainly, the $N=100$ approximation looks better than the $N=25$ approximation. We can also plot the errors for both as a function of time:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nY7MzrA+EAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f8b9542cfd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "error25 = y25 - (2 - np.exp(-t25))\n",
    "error100 = y100 - (2 - np.exp(-t100))\n",
    "\n",
    "plt.semilogy(t25, error25, 'k-', t100, error100, 'b-.')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('error')\n",
    "plt.legend(['$N=25$', '$N=100$'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Clearly, the error for $N=25$ is larger over the time domain, as we might expect.  Recall that \n",
    "$(y_{n+1}-y_n)/\\Delta = -py_n + q + \\mathcal{O}(\\Delta)$, so $y_{n+1} = (1-\\Delta p)y_n + \\Delta q + \\mathcal{O}(\\Delta^2)$.  This second-order error in $y_n$ is the *local error*, i.e., the error introduced by a single step in time.  On the other hand, the *global error* is the error shown above as a function of time.  A key question is how that global error at a fixed point in time depends on $\\Delta$.   \n",
    "\n",
    "We can attack the global error for our simple problem.  For constant $q$, $p$ and $\\Delta$, the analytic solution is\n",
    "\n",
    "$$\n",
    "    y_n = \\frac{q}{p} (1 - e^{-p \\Delta n})  \\, ,\n",
    "$$\n",
    "\n",
    "while the forward-Euler solution is\n",
    "\n",
    "$$\n",
    "    \\begin{aligned}\n",
    "     y^{FE}_n  &= \\Delta q \\sum^{n-1}_{i=0} (1-\\Delta p)^{i} \\\\\n",
    "          &= \\Delta q \\frac{1 - (1-\\Delta p)^{n-1}}{\\Delta p } \\\\\n",
    "          &= \\frac{q}{p} [ 1 - (1-\\Delta p)^{n-1} ] \\, .\n",
    "    \\end{aligned}\n",
    "$$\n",
    "\n",
    "For a given $t$ and $\\Delta$, the number of steps is $n = t/\\Delta$, and the global error is therefore\n",
    "\n",
    "$$\n",
    "     \\varepsilon(t, \\Delta) = y^{FE}(t) - y(t) = \\frac{q}{p} [e^{-p t}-(1-\\Delta p)^{\\frac{t}{\\Delta} - 1} ] \\, .\n",
    "$$\n",
    "\n",
    "Note first that \n",
    "\n",
    "$$\n",
    "     \\lim_{\\Delta \\to 0} (1-\\Delta p)^{t/\\Delta} = e^{-p t} \\, ,\n",
    "$$\n",
    "\n",
    "so $\\varepsilon(t, \\Delta) = (q/p)[e^{-pt}-e^{-p/t}/(1-\\Delta p)] \\to 0$ as $\\Delta \\to 0$.  That mean the approximate value *converges* to the correct value when the step size $\\Delta$ vanishes.  \n",
    "\n",
    "However, for fixed $t$, how *fast* does the error decrease with $\\Delta$?  And for fixed $\\Delta$, how does the error change with time?  Let's expand the error $\\varepsilon(t, \\Delta)$ about $\\Delta = 0$:\n",
    "\n",
    "$$\n",
    "\\begin{split}\n",
    "\\varepsilon(t, \\Delta) &= \\varepsilon(t, 0) + \\frac{\\partial \\varepsilon}{\\partial \\Delta}\\Big |_{\\Delta = 0}  + \\mathcal{O}(\\Delta^2) \\\\\n",
    "             &=  \\Delta \\left(\\frac{p q}{2} t e^{- p t} - q e^{- p t}\\right) + \\mathcal{O}(\\Delta^2) \\\\\n",
    "             &= \\mathcal{O}(\\Delta) \\, .\n",
    "\\end{split}      \n",
    "$$\n",
    "\n",
    "Evidently, the global error is of first order.  However, it's not clear (or easy to determine) exactly how the error depends on $t$ for fixed $\\Delta$.  If we assume $p > 0$ (i.e., radioactive decay and not multiplying pythons), then \n",
    "\n",
    "$$\n",
    " \\Big |\\varepsilon(t, \\Delta) \\Big | < \\Bigg | \\frac{q}{p} \\Bigg | \\Bigg | (1-\\Delta p)^{\\frac{t}{\\Delta} -1} \\Bigg | \\, .\n",
    "$$\n",
    "\n",
    "However, the right-hand side is bounded (i.e., does not grow with large $t$) only if $|1-\\Delta p| < 1$, and that is true only if $\\Delta < 2/p$.  To summarize: the global error does not blow up as long as $p > 0$ and $\\Delta < 2/p$.\n",
    "\n",
    "Of course, simply stating such rules is never as exciting as seeing what happens when the rules are broken, so we'll solve $y' = 2 - y$ with $y(0) = 0$ for $N = 4$, $N = 10$, and $N = 20$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f8b954dd2e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p = 1.0\n",
    "q = 2.0\n",
    "t = {}\n",
    "y = {}\n",
    "y0 = 0\n",
    "for N in [4, 10, 25]:\n",
    "    t[N] = np.linspace(0, 10, N+1)\n",
    "    Delta = t[N][1]-t[N][0]\n",
    "    y[N] = np.zeros(N+1)\n",
    "    y[0] = y0\n",
    "    for i in range(1, N+1):\n",
    "        y[N][i] = (1.0 - Delta*p)*y[N][i-1] + Delta*q\n",
    "    \n",
    "plt.plot(t[4], y[4], 'k-o',  t[10], y[10], 'b-s', t[25], y[25], 'r-*')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('y(t)')\n",
    "plt.legend(['$N=4$', '$N=10$',  '$N=25$'], loc=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Yikes! The $N=4$ case clearly does not converge to the steady-state value $y = 1$!  In other words, it *diverges*.  Because the forward-Euler approximation converges only for certain values of $\\Delta$ and $p$, it is called a *conditionally stable* method.  \n",
    "\n",
    "Conditional stability requires very small $\\Delta$.  For problems whose solutions blow up (i.e., $p < 0$), all bets are off and an *unconditionally stable* method is the better choice. For example, the backward-Euler approximation is unconditionally stable, demonstration of which is an exercise left to the student (i.e., repeat this study with backward Euler and show that $\\varepsilon(t, \\Delta)$ cannot blow up)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "**Exercise**:  Repeat the example above (i.e., $p=1$, $q=1$, $y(0) = 0$, and $N = 4, 10, 25$) to show that backward Euler has no stability issues.\n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Use *backward Euler* to solve $y' = 2t - 3y + 1$ given $y(1) = 5$ and estimate $y(1.2)$.  Compare the error in this estimate for $\\Delta = 0.1, 0.01, 0.001, 0.0001$.  How does this error depend on $\\Delta$? \n",
    "\n",
    "***\n",
    "\n",
    "**Exercise**:  Repeat the previous exercise using Heun's method (see a previous exercise).\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Further Reading\n",
    "\n",
    "None."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
