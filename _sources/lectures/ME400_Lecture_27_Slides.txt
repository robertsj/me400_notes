{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Lecture 27 - Numerical Solutions of Two-Point BVPs\n",
    " \n",
    "**Last Time**: Systems of IVPs and `odeint`\n",
    "\n",
    "**Today**: One-dimensional, boundary-value problems (BVPs)\n",
    "\n",
    "**Remember**: Exam 3 on Friday. Same rules: one 11'' by 8.5'' sheet, both sides, handwritten, but no other resources.  Same format: roughly half written, half coded. Cumulative, with emphasis on material since Exam 2."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives \n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- Explain the two major boundary conditions and how to represent them using finite differences\n",
    "- Solve two-point  BVPs characteristics of heat transfer and other applications using the finite-difference method"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Key Terms\n",
    "\n",
    "- finite-difference method (Euler is one example)\n",
    "- Dirichlet condition (e.g., fixed temperature)\n",
    "- Neumann condition (e.g., perfect insulator)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## The Two-Point BVP\n",
    "\n",
    "Our focus is on the second-order BVP\n",
    "\n",
    "$$\n",
    "    \\frac{d^2 y}{dx^2} + p(x) \\frac{dy}{dx} + q(x) y(x) = f(x), \\qquad y(x_a) = y_a, \\qquad y(x_b) = y_b \\, .\n",
    "$$\n",
    "\n",
    "The goal is to apply numerical differentiation to this equation, leading to a linear system.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Whence Such BVPs?\n",
    "\n",
    "$$\n",
    "\\text{heat conduction:} \\qquad \\boxed{-\\frac{d}{dx}\\left ( k(x)\\frac{dT}{dx}\\right ) = h(x)} \\, \\quad \\text{s.t.} \\quad T(x_a) = T_a \\quad \\text{and} \\quad T(x_b) = T_b \n",
    "$$\n",
    "\n",
    "$$\n",
    "\\text{neutron diffusion:} \\qquad \\boxed{-\\frac{d}{dx}\\left( D(x) \\frac{d\\phi}{dx} \\right )+ \\Sigma_a \\phi(x) = s(x)} \\, \\quad \\text{s.t.} \\quad \\phi(x_a) = \\phi_a \\quad \\text{and} \\quad \\phi(x_b) = \\phi_b \n",
    "$$\n",
    "\n",
    "Many other problems in physics and engineering take the same form."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**: Put the heat conduction equation into the standard form $y'' + py' + qy = f$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "The product rule gives us \n",
    "\n",
    "$$\n",
    "\\begin{split}\n",
    "  -\\frac{d}{dx}\\left ( k(x)\\frac{dT}{dx}\\right )  \n",
    "    &= - k(x) \\frac{d^2T}{dx^2} - \\frac{dk}{dx}\\frac{dT}{dx} = h(x) \\, .\n",
    "\\end{split}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "\n",
    "Then, divide both sides by $-k(x)$ to find\n",
    "\n",
    "$$\n",
    "\\begin{split}\n",
    " \\frac{d^2T}{dx^2} + \\left( \\frac{1}{k(x)}\\frac{dk}{dx} \\right ) \\frac{dT}{dx} = -\\frac{h(x)}{k(x)} \\, ,\n",
    "\\end{split}\n",
    "$$\n",
    "\n",
    "or $\\boxed{T'' + pT' + qT = f}$, where $p(x) = \\frac{1}{k(x)}\\frac{dk}{dx}$, $q(x) = 0$, and $f(x) =  -\\frac{h(x)}{k(x)}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Chopping up $x$\n",
    "\n",
    "Back to the model problem $y'' + py' + qy = f$.  \n",
    "\n",
    "\"Discretize\" $x$ into the points\n",
    "\n",
    "$$\n",
    "   \\boxed{x = x_a, \\, x_a + \\Delta, x_a + 2\\Delta, \\ldots, x_b - \\Delta, x_b}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "or $\\boxed{x_n = x_a + \\Delta n}$ for $n = 0, 1, \\ldots, N$.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "We want to find $y(x_n) = y_n$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Replace $y'$ and $y''$ with Finite-Difference Approximations\n",
    "\n",
    "$$\n",
    "  \\boxed{\\frac{dy}{dx}\\Bigg |_{x = x_n} = \\frac{y_{n+1} - y_{n-1}}{2\\Delta}}\n",
    "     \\qquad \\text{and} \\qquad\n",
    "  \\boxed{\\frac{d^2y}{dx^2}\\Bigg |_{x = x_n} = \\frac{y_{n+1} - 2y_{n} + y_{n-1}}{\\Delta^2}}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Substitute into $y'' + py' + qy(x_n) = f(x_n)$ to get\n",
    "\n",
    "$$\n",
    "\\boxed{ \\frac{y_{n+1} - 2y_{n} + y_{n-1}}{\\Delta^2} + p_n \\frac{y_{n+1} - y_{n-1}}{2\\Delta} \n",
    "   + q_n y_n = f_n }\\, ,\n",
    "$$\n",
    "\n",
    "where $p_n = p(x_n)$, $q_n = q(x_n)$ and $f_n = f(x_n)$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "*Key observation*: the value $y_n$ depends on its neighbors, $y_{n+1}$ and $y_{n-1}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**What about at $x_0$ and $x_N$**?  Apply boundary conditions!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "A **Dirichlet condition** sets the value of $y(x_a)$:\n",
    "$$\n",
    "   \\qquad y(x_a) = y_a \\longrightarrow y_0 = y_a \n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "A **Neumann condition** sets the value of $\\frac{dy}{dx}\\big |_{x=x_a}$:\n",
    "\n",
    "$$\n",
    "   \\frac{dy}{dx} \\Bigg |_{x=x_a} = d_a \\longrightarrow \\frac{y_{1}-y_{0}}{\\Delta} = d_a \\, .\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Similar expressions for the left boundary."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**:  Set up the finite-difference equations for $-y'' + y(x) = 1$ subject to $y(0) = y(10) = 0$ using 5 evenly spaced points **with pen and paper**.  Then, use NumPy to solve the system, and use Matplotlib to plot the result.\n",
    "\n",
    "Do the same for $\\frac{dy}{dx}\\Bigg |_{x=10} = 0$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**: Consider the following *partial* differential equation (PDE):\n",
    "\n",
    "$$\n",
    " \\frac{\\partial c}{\\partial t} = D(x) \\frac{\\partial^2 c}{\\partial x^2} - v(x)\\frac{\\partial c}{\\partial x} + S(x)\n",
    "$$\n",
    "\n",
    "which is a simplified, one-dimensional, *advection-diffusion equation*.  Here, $c(x)$ is the concentration of some quantity of interest (perhaps a pollutant in a stream), $D$ is a diffusion coefficient (that quantifies how rapidly the species tends to dissipate away from a region in space), and $v(x)$ is the velocity of the surrounding field (here, perhaps the stream with the pollutant).  \n",
    "\n",
    "Like many equations that model physical systems, the convection-diffusion equation is a statement of balance.  On the left, we have $\\frac{\\partial c}{\\partial t}$, which is  the time rate of change of the concentration at any point $x$.  This change comes from three sources:\n",
    "\n",
    "  1. the *diffusion* of the species away from a point $x$, here quantified by $D(x) \\frac{\\partial^2 c}{\\partial x^2}$\n",
    "  2. the *advection* of the species away from a point $x$ due to the flow of the surrounding field (here, again, the stream), here quantified by  $-v(x)\\frac{\\partial c}{\\partial x}$\n",
    "  3. any external sources of the species, perhaps a leaking canister or a chemical reaction, here represented by $S(x)$\n",
    "\n",
    "Now, do the following:\n",
    "\n",
    "  - Suppose the unit of $c$ is m$^{-3}$.  What must be the units of $D$, $v$, and $S$?\n",
    "  - Write down the *steady-state* form of the above convection-diffusion equation by setting the time derivative to zeros.\n",
    "  - Solve the steady-state equation  for the case $v = 1$, $S = 1$, $c(0) = 0$ and $c(10) = 1$ using $\\Delta = 0.01$ m.\n",
    "  - Plot your solution for $D = 10$, $D = 1$, and $D = 0.1$.  What happens?  (The phenomenon you should observe is the development of a *boundary layer*, a term that should become familiar in fluid mechanics.)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "By now, you should be able to:\n",
    "- Explain the two major boundary conditions and how to represent them using finite differences\n",
    "- Solve two-point  BVPs characteristics of heat transfer and other applications using the finite-difference method"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Since the last exam, we've explored:\n",
    "  - finite-difference approximations for $df/dx$ and $d^2f/dx^2$\n",
    "  - numerical approximations for $\\int^b_a f(x) dx$ (including `scipy.integrate.quad`)\n",
    "  - setting up and solving $\\mathbf{Ax}=\\mathbf{b}$ (including `np.linalg.solve`)\n",
    "  - setting up and solving $f(x) = 0$ and $\\mathbf{f}(\\mathbf{x}) = \\mathbf{0}$ (including `scipy.optimize.fsolve`)\n",
    "  - minimizing $f(x)$ and $f(\\mathbf{x})$ with and without constraints (including `scipy.optimize.minimize` and `linprogr`)\n",
    "  - fitting data $(x_i, y_i)$ to polynomials like $ax^2 + bx + c$ and arbitrary models $f(x, a, b, c)$ (including `np.polyval`, `np.polyfit`, and `scipy.optimize.curve_fit`)\n",
    "  - interpolating data (including  `scipy.interpolate.interp1d` and `interp2d`)\n",
    "  - solving `dy/dt = f(y(t), t)` using Euler's method (`odeint` *not* on the exam)"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "livereveal": {
   "scroll": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
