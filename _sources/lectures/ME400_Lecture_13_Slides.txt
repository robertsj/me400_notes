{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Lecture 13 - More on Functions\n",
    " \n",
    "In [Lecture 12](ME400_Lecture_12.ipynb), the basics of defining functions were presented.  In this lecture, more advanced features of function definitions are presented, including the use of the special `*arg` and `**kwarg` structures.  In addition, anonymous `lambda` functions are presented for quick, in-line applications.  Finally, some interesting (and possibly suprising) applications of functions are considered, which include use of functions as arguments to other functions and the use of functions that call themselves (i.e., *recursion*). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- Develop and trace a full program that uses functions.\n",
    "- Define a recursive function.\n",
    "\n",
    "Other things from the reading you should be aware of (but that won't be focused on in lecture):\n",
    " - `*args` and `**kwargs` (e.g., do `help(plt.plot)`)\n",
    " - `lambda` functions (e.g., `f = lambda x: x**2` and `f(2)`)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Quick Review - Flowcharts and Functions\n",
    "\n",
    "Last time, we had the following problem: given a list of five numbers, e.g., `L = [1, 2, 2, 3, 5]`, write a function that decides whether `L` has exactly one pair of numbers or not.  (Here, that is `True`).\n",
    "\n",
    "Functions are **subprograms** so pseudocode and flowcharts can be made separate.\n",
    "\n",
    "A function *call* is an expression and, hence can be part of a single statement, e.g., `counts = count_em(L)`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recursive Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "The topic of **recursion** is challenging, and recurssion can often (not always) be replaced by loops. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "A **recursive process** gives output (say, a particular value) at one step using as input the output from one or more previous steps **based on a fixed relationship**.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "A **recursive function** is a function that calls *itself*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example**: Compute $n! = n\\times (n-1) \\times \\ldots \\times 2 \\times 1$ using recurssion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "def factorial(n):\n",
    "    \"\"\" Computes n! = n*(n-1)*...*2*1 using recursion.\n",
    "    \"\"\"\n",
    "    if n == 1:\n",
    "        f = 1\n",
    "    else:\n",
    "        f = \"YOUR CODE HERE\"\n",
    "    return f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "factorial(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "The basic recursive function in Python:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "def a_basic_recursive_function(n):\n",
    "    \"\"\"This function does something simple, but it\n",
    "       might not be immediately obvious.\"\"\"\n",
    "    if n == 1:  # <--- ALWAYS NEED SOMETHING TO STOP RECURSION!!\n",
    "        print('recursion is ending!')\n",
    "        return 1\n",
    "    else:\n",
    "        print('n = ', n)\n",
    "        return n + a_basic_recursive_function(n-1)\n",
    "    \n",
    "a_basic_recursive_function(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Infinite recursion is bad:\n",
    "\n",
    "```python\n",
    "def infinite_recursion(n):\n",
    "    return n + infinite_recursion(n-1)\n",
    "print(infinite_recursion(5))\n",
    "```\n",
    "\n",
    "How would this stop?  From $n = 5$, to $n = -10$, to $n = -\\infty$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example**: Use recursion to compute the $n$th value in the Fibonacci sequence.  Recall, the Fibonacci sequence is defined by the recursion relationship $f_n = f_{n-1} + f_{n-2}$ with $f_1 = 1$ and $f_2 = 1$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fibonacci(n):\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fibonacci(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example**:  Trace the following code using the debugger:\n",
    "\n",
    "```python\n",
    "1. def foo(n):\n",
    "2.     if n == 1:\n",
    "3.         f = 1\n",
    "4.     else:\n",
    "5.         f = foo(n-1) + n\n",
    "6.     return f\n",
    "7. foo(4)\n",
    "```\n",
    "\n",
    "Make sure you can do this by hand, too!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "**Exercise**: Sum an array recursively."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recap\n",
    "\n",
    "You should  now be able to\n",
    "\n",
    "- Develop and trace a full program that uses functions.\n",
    "- Define a recursive function."
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  },
  "livereveal": {
   "scroll": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
