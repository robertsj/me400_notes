{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Lecture 25 - Solving First-Order IVPs Numerically\n",
    " \n",
    "**Last Time**: Interpolation\n",
    "\n",
    "**Today**: Initial Value Problems (IVPs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- Define an appropriate differential equation to model an engineering process\n",
    "- Apply forward and backward differences to produce forward and backward Euler\n",
    "- Solve IVPs numerically to produce solutions at several time steps\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Prerequisites\n",
    "\n",
    "You should already be able to\n",
    "\n",
    "- Solve ODEs based on what you've learned in a course like MATH 340\n",
    "- Name your favorite differential equation from physics (if you're drawing a blank, remember $F=m\\frac{d^ 2 x}{dt^2}$)\n",
    "- Compute a first-order, finite-difference approximation for $\\frac{df}{dx}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Key Terms\n",
    "\n",
    "- Euler's method\n",
    "- forward Euler\n",
    "- backward Euler\n",
    "- local error\n",
    "- global error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## The General Problem\n",
    "\n",
    "Our goal is to solve the initial value problem (IVP):\n",
    "$$\n",
    "  \\frac{dy}{dt} = f(y(t), t) \\qquad y(0) = y_0 \\, .\n",
    "$$\n",
    "\n",
    "Today, just single IVPs.  Next time, systems of IVPs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## There Once was a Man Named Euler\n",
    "\n",
    "![Euler's grave in St. Petersburg](http://farm2.static.flickr.com/1085/1270449525_4b4b973a27_o.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Recall the forward and backward difference approximations:\n",
    "\n",
    "$$\n",
    "    \\frac{dy}{dt} \\approx \\frac{y(t+\\Delta)-y(t)}{\\Delta} \\qquad \\text{and} \\qquad\n",
    "    \\frac{dy}{dt} \\approx \\frac{y(t)-y(t-\\Delta)}{\\Delta}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Substitute forward difference into $y' = f(y(t), t)$ to get\n",
    "\n",
    "$$\n",
    "    \\frac{y(t+\\Delta)-y(t)}{\\Delta} = f(y(t), t) + \\mathcal{O}(\\Delta) \n",
    "$$\n",
    "\n",
    "or \n",
    "\n",
    "$$\n",
    "    y(t+\\Delta) = \\Delta f(y(t), t) + y(t)  + \\mathcal{O}(\\Delta^2) \n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Drop the error term to get the one-step **forward Euler approximation**\n",
    "\n",
    "$$\n",
    "    \\boxed{y(t+\\Delta) \\approx \\Delta f(y(t), t) + y(t)}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Do the same with the backward difference to get\n",
    "\n",
    "\n",
    "$$\n",
    "    \\frac{y(\\tau)-y(\\tau-\\Delta)}{\\Delta} = f(y(\\tau), \\tau) + \\mathcal{O}(\\Delta) \n",
    "$$\n",
    "\n",
    "and let $\\tau = t+\\Delta$ to get the one-step **backward Euler approximation**:\n",
    "\n",
    "$$\n",
    "\\boxed{ y(t+\\Delta) \\approx \\Delta f(y(t+\\Delta), t+\\Delta) + y(t+\\Delta)}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**: Consider $y' = \\sqrt{y(t)} + 2$ with $y(0) = 1$.  Use one step of the *forward Euler method* to estimate $y(0.1)$.  Do this *by hand*.\n",
    "\n",
    "**Exercise**: Consider $y' = \\sqrt{y(t)} + 2$ with $y(0) = 1$.  Use one step of the *backward Euler method* to estimate $y(0.1)$.  Do this *by hand*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Chopping Up Time\n",
    "\n",
    "We'll approximate $y(t)$ at discrete times $t_0,\\, t_1,\\, t_2,\\, \\ldots$, or\n",
    "\n",
    "$$\n",
    " y_n = y(t_n) \\qquad  t_n = t_0 + n\\Delta \\qquad n = 0, 1, \\ldots \\, .\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Apply Euler's method to go from $y_n$ to $y_{n+1}$:\n",
    "\n",
    "$$\n",
    "  \\text{forward Euler} \\qquad  \\boxed{y_{n+1} =  \\Delta f(y_n, t_n) + y_n \\, , \\qquad n = 0, 1, 2, \\ldots}\n",
    "$$\n",
    "\n",
    "$$\n",
    "  \\text{backward Euler} \\qquad \\boxed{y_{n+1}  = \\Delta f(y_{n+1}, t_{n+1}) + y_n \\, , \\qquad n = 0, 1, 2, \\ldots}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**:  Given $y' = -2y(t) + 1$ with $y(0) = 0$, use forward Euler to estimate $y(10)$ for $\\Delta = 0.2$, $0.1$, and $0.05$.  What happens to the error?  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "y_10 = 0.5*(1.0-np.exp(-2*5)) # true value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Application Problem - Transferring Wort\n",
    "\n",
    "Consider a cylindrical tank 2.5 m tall with a radius of 1.25 m filled with wort (a magical concoction of water, barley, and hops--no fruit, please).  At the bottom of this tank is a drain that opens to a flow area of 0.0025 m$^2$.  At time $t = 0$, the drain is manually opened such that its open flow area follows the form\n",
    "\n",
    "$$\n",
    "  a_{drain}(t) = \n",
    "  \\begin{cases}\n",
    "     0.0025 \\frac{t^2}{25} & t \\leq 5 \\, \\text{s} \\\\\n",
    "     0.0025 & t > 5\\, \\text{s} \\, .\n",
    "  \\end{cases}\n",
    "$$\n",
    "\n",
    "In other words, it takes some time to get that drain open, but it becomes easier to open with time until it fully opens (not unrealistic methinks).  **How long does it take to get my wort out of the tank?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Getting the IVP\n",
    "\n",
    "**Assume** the fluid is *incompressible* (i.e., $\\rho$ is constant) and that gravity is the only thing driving this process.\n",
    "\n",
    "Equations of interest (from thermodynamics and/or fluid dynamics):\n",
    "\n",
    "$$\n",
    "  \\text{conservation of mass:} \\qquad  \\rho a V = \\text{constant}\n",
    "$$\n",
    "\n",
    "and \n",
    "\n",
    "$$\n",
    "  \\text{conservation of energy:} \\qquad \\frac{V^2}{2} + gz = \\text{constant}\n",
    "$$\n",
    "\n",
    "where $V$ is velocity, $a$ is a flow area, $z$ is height, and $g$ is gravitational acceleration (9.81 m/s$^2$)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Then conservation of energy gives\n",
    "\n",
    "$$\n",
    "  \\frac{V_{top}^2-V_{drain}^2}{2} + g \\overbrace{(z_{top}-z_{bottom})}^{h} = 0 \\, .\n",
    "$$\n",
    "\n",
    "**Assume** that $V_{top} \\ll V_{drain}$ so that $\\boxed{V_{drain} = \\sqrt{2gh(t)}}$ where $h(t)$ will vary with time."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Conservation of mass gives\n",
    "\n",
    "$$\n",
    "\\begin{split}\n",
    "   \\frac{d m_{drain}}{dt} \\Delta t &= \\frac{d m_{top}}{dt} \\Delta t \\\\\n",
    "   \\rho V_{drain}(t) a_{drain}(t) \\Delta t &= \\rho a_{top} \\left(-\\frac{dh}{dt}\\right ) \\Delta t \\, .\n",
    "\\end{split}\n",
    "$$\n",
    "\n",
    "or \n",
    "\n",
    "$$\n",
    "  \\boxed{\\frac{dh}{dt} = -\\frac{a_{drain}(t)}{a_{top}} \\sqrt{2gh(t)}}\n",
    "$$\n",
    "\n",
    "Solve this with **backward Euler**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Connecting the Dots\n",
    "\n",
    "- What if this were not a cylinder but a cone (i.e., a tapered funnel)?  Or something more complicated?  How would you modify the equation?\n",
    "- Suppose you were to design a tank like the one we analyzed that has to fit in some finite volume.  How would you optimize its geometry to provide the fast drainage possible given a fixed drain flow area?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recap\n",
    "\n",
    "You should now be able to\n",
    "\n",
    "- Define an appropriate differential equation to model an engineering process\n",
    "- Apply forward and backward differences to produce forward and backward Euler\n",
    "- Solve IVPs numerically to produce solutions at several time steps\n"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "livereveal": {
   "scroll": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
