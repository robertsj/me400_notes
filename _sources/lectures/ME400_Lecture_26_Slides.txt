{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Lecture 26 - Numerical Solutions of First-Order Systems\n",
    " \n",
    "This lesson is a direct extension of our last lesson, in which the focus was the numerical solution of first-order IVPs.  Here, those techniques are extended to *systems* of first-order equations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- Solve systems of first-order IVPs numerically using forward and backward Euler's method\n",
    "- Solve systems of first-order IVPs using `odeint`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Prerequisites\n",
    "\n",
    "You should already be able to\n",
    "\n",
    "- Solve IVPs using Euler's method (forward and backward)\n",
    "- Define one- and two-dimensional arrays using NumPy arrays \n",
    "- Use `np.linalg.solve` to solve $\\mathbf{Ax = b}$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Key Terms\n",
    "\n",
    "- `odeint`\n",
    "- first-order system"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## A Model Problem\n",
    "\n",
    "The *spring-mass* system:\n",
    "\n",
    "$$\n",
    "   m \\frac{d^2 x}{dt^2} = -k x(t) - a \\frac{dx}{dt} \\, , \\qquad x(0) = x_0\\, \\text{and}\\, x'(0)=v_0 \\, .\n",
    "$$\n",
    "\n",
    "where $x(t)$ is position (m), $m$ is mass (kg), $k$ is a spring constant, and $a$ is a damping coefficient. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "**Exercise**:  What must be the units of $k$ and $a$?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Getting to $y' = f(y(t), t)$\n",
    "\n",
    "To use Euler's method (or `odeint`), the IVP must be in the standard form\n",
    "\n",
    "$$\n",
    "  \\frac{dy}{dt} = f(y(t), t) \\, .\n",
    "$$\n",
    "\n",
    "For the spring-mass sytem, we must *eliminate the second derivative*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Introduce $u = x' \\longrightarrow u' = x''$\n",
    "\n",
    "Then, the spring-mass IVP becomes\n",
    "$$\n",
    "\\begin{split}\n",
    "    \\frac{dx}{dt} &= u(t) \\\\\n",
    "    \\frac{du}{dt} &= \\frac{-kx(t) + -au(t)}{m} \\\\\n",
    "\\end{split}\n",
    "$$\n",
    "\n",
    "or\n",
    "\n",
    "$$\n",
    "\\boxed{\n",
    "\\overbrace{\\left [ \\begin{array}{c}\n",
    "  x' \\\\\n",
    "  u' \n",
    "\\end{array} \\right ]}^{\\mathbf{y}'}\n",
    "= \n",
    "\\overbrace{\n",
    "\\left [ \\begin{array}{rr}\n",
    "    0   &  1 \\\\\n",
    "   -\\frac{k}{m}  &  -\\frac{a}{m} \\\\\n",
    "\\end{array} \\right ]\n",
    "\\left [ \\begin{array}{c}\n",
    "  x(t) \\\\\n",
    "  u(t)\n",
    "\\end{array} \\right ]}^{\\mathbf{f}(\\mathbf{y}(t), t)}\n",
    "}\n",
    "$$\n",
    "\n",
    "\n",
    "with $x(0) = x_0$ and $x'(0) = u(0) = v_0$. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Using Euler on  IVP System\n",
    "\n",
    "For systems, $\\frac{dy}{dt} = f(y(t), t)$ becomes $\\frac{d\\mathbf{y}}{dt} = \\mathbf{f}(\\mathbf{y}(t), t)$, and Euler steps become\n",
    "\n",
    "$$\n",
    "  \\boxed{\\text{forward Euler} \\qquad \\mathbf{y}_{n+1} = \\Delta \\mathbf{f}(\\mathbf{y}_n, t_n) + \\mathbf{y}_n }\n",
    "$$\n",
    "and\n",
    "$$\n",
    "  \\boxed{\\text{backward Euler} \\qquad \\mathbf{y}_{n+1} = \\Delta \\mathbf{f}(\\mathbf{y}_{n+1}, t_{n+1}) + \\mathbf{y}_n} \\, .\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**:  Consider this system of IVPs:\n",
    "\n",
    "$$\n",
    "\\boxed{\n",
    "\\overbrace{\\left [ \\begin{array}{c}\n",
    "  x' \\\\\n",
    "  u' \n",
    "\\end{array} \\right ]}^{\\mathbf{y}'}\n",
    "= \n",
    "\\overbrace{\n",
    "\\left [ \\begin{array}{rr}\n",
    "    0   &  1 \\\\\n",
    "   -\\frac{k}{m}  &  -\\frac{a}{m} \\\\\n",
    "\\end{array} \\right ]\n",
    "\\left [ \\begin{array}{c}\n",
    "  x(t) \\\\\n",
    "  u(t)\n",
    "\\end{array} \\right ]}^{\\mathbf{f}(\\mathbf{y}(t), t)}\n",
    "}\n",
    "$$\n",
    "\n",
    "with $x(0) = x_0$ and $x'(0) = u(0) = v_0$.  Starting from the initial condition, take one step of forward Euler with a step size of $\\Delta$ for the spring-mass system.  Then do the same with backward Euler.  **Do this by hand!**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**:  For $\\Delta = 0.01$, compute $x(10)$ and $y(10)$ by solving the following system using forward Euler\n",
    "\n",
    "$$\n",
    "\\overbrace{\\left [ \\begin{array}{c}\n",
    "  x' \\\\\n",
    "  y' \n",
    "\\end{array} \\right ]}^{{\\mathbf{z'}}}\n",
    "= \n",
    "\\overbrace{\\underbrace{\\left [ \\begin{array}{rr}\n",
    "  -10   &  0.00 \\\\\n",
    "   10   & -0.01 \\\\\n",
    "\\end{array} \\right ]}_{\\mathbf{A}}\n",
    "\\left [ \\begin{array}{c}\n",
    "  x(t) \\\\\n",
    "  y(t)\n",
    "\\end{array} \\right ]\n",
    "+\n",
    "\\underbrace{\\left [ \\begin{array}{c}\n",
    "  1 \\\\\n",
    "  0\n",
    "\\end{array} \\right ]}_{\\mathbf{s}}}^{\\mathbf{f}(\\mathbf{z}(t), t)} \\, ,\n",
    "$$\n",
    "\n",
    "and $x(0) = y(0) = 0$.  Here, $\\mathbf{A}$ and $\\mathbf{s}$ are defined for convenience."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "Delta = 0.001                  # time step\n",
    "num_steps = int(10.0/Delta)    # number of steps\n",
    "A = np.array([[-10.0,  0.00],\n",
    "              [ 10.0, -0.01]]) # system matrix\n",
    "s = np.array([1.0, 0.0])       # forcing term\n",
    "z = np.zeros((num_steps+1, 2))   # z[0, :] is initial condition\n",
    "for i in range(num_steps):\n",
    "    # compute z(t+Delta) = Delta*f(z(t), t) + z(t)\n",
    "    pass\n",
    "x, y = z[-1, :]\n",
    "print(\"x={:.3f} and y={:.3f}\".format(x, y))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## SciPy's `odeint`\n",
    "\n",
    "In practice, it may be easier and faster to use `odeint`.\n",
    "\n",
    "Basic use:\n",
    "```\n",
    "from scipy.integrate import odeint\n",
    "odeint(func, y0, t, args=(arg1, arg2, ...))\n",
    "```\n",
    "where \n",
    " - `func` represents $\\mathbf{f}(\\mathbf{y}(t), t)$ and should have the form `def func(y, t, arg1, arg2, ...)`\n",
    " - `y0` is the initial condition (either a single `float` or a NumPy array if a system)\n",
    " - `t` array of times at which the solution is to be computed (the first value is the initial condition time)\n",
    " - `args` are options arguments passed to `func`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**:  Given $y' = -2y(t) + 1$ with $y(0) = 0$, use forward Euler and `odeint` to estimate $y(10)$ for $\\Delta = 0.2$, $0.1$, and $0.05$.  What happens to the error?  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "y_ref = lambda t: 0.5*(1.0-np.exp(-2*t)) # true value\n",
    "# forward Euler\n",
    "t = np.linspace(0, 10, 51)\n",
    "Delta = t[1]-t[0]\n",
    "y_fe = np.zeros(len(t))\n",
    "for i in range(len(t)-1): \n",
    "    y_fe[i+1] = Delta*(-2*y_fe[i]+1) + y_fe[i]\n",
    "print(\"Delta={:.4e}, error={:2e}\".format(Delta, y_fe[-1]-y_ref(10)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "# odeint\n",
    "from scipy.integrate import odeint\n",
    "def yprime(y, t):\n",
    "    return -2*y + 1\n",
    "y_oi = odeint(yprime, y0=0.0, t=t)\n",
    "plt.plot(t, y_oi, t, y_fe,  t, y_ref(t), ':');\n",
    "plt.legend(['fe', 'odeint', 'true']);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**: Solve  $y' = \\sqrt{y(t)} + 2$ with $y(0) = 1$ using `odeint` for `t = [0, 1, ..., 10.0]`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "def yprime(y, t):\n",
    "    pass\n",
    "y0 = None\n",
    "t = None\n",
    "odeint(yprime, y0, t) # no args needed for this problem"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**:  Consider the spring-mass system.  For $m = 1$, $k = 1$, $a = 1$, $x(0) = 0$, and $v(0) = 1$, compute $x(t)$ at $t = [0, 0.5, 1.0, \\ldots, 10]$ (that's 21 times) using `odeint`.  Plot these estimates and the the actual solution.  Also plot the *absolute error*.\n",
    "\n",
    "For reference, the solution is\n",
    "\n",
    "$$\n",
    "\\frac{2 \\sqrt{3}}{3} e^{- \\frac{t}{2}} \\sin{\\left (\\frac{\\sqrt{3} t}{2} \\right )}\n",
    "$$\n",
    "\n",
    "(Psst... substitute $x(t) = e^{rt}$, solve the quadratic for two roots $r_1$ and $r_2$. Then  $x(t) = Ae^{r_1 t} + Be^{r_2 t}$ is the general solution.  Apply IC's, and use $\\sin(z) = 2i(e^{iz} - e^{-iz})$ to get this form.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recap \n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- Solve systems of first-order IVPs numerically using forward and backward Euler's method\n",
    "- Solve systems of first-order IVPs using `odeint`\n"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "livereveal": {
   "scroll": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
