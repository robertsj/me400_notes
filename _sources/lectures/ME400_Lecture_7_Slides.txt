{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Lecture 7 - More on Conditionals\n",
    " \n",
    "In [Lecture 5](ME400_Lecture_5.ipynb), the basics of programming logic were introduced, including the idea of *selection*. In [Lecture 6](ME400_Lecture_6.ipynb), those concepts were put into practice in Python using the `if`, `elif`, and `else` structure.  In this lesson, we dive into more complicated use cases, focusing on *nested* conditionals and the more complex code resulting from such conditionals.  Along the way, we'll apply the *graphical debugger* in Spyder to help understand the flow of execution (and to catch bugs!).  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- Read and write nested `if` statements\n",
    "- Explain the difference between syntactical and logical errors\n",
    "- Use the graphical debugger in Spyder to trace and debug a program"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Recap of Grade Problem (and Preview of HW4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Template includes new functions (`np.sort` and `np.hstack`).\n",
    "\n",
    "**Example**: combine two 1-D arrays `a` and `b` into one longer array `c`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 5, 3, 2, 2, 6])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "a = np.array([3, 5, 3])\n",
    "b = np.array([2, 2, 6])\n",
    "c = np.hstack((a, b))\n",
    "c"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example**: Suppose `c` represents scores. Compute the average score when **two drops** are allowed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.25"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dropped = 2\n",
    "sum(np.sort(c)[dropped:])/(len(c)-2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "In summary, you need to do these things:\n",
    " \n",
    " - Get the number of tasks in each category, accounting for the `option` (e.g., the number of homeworks included in the grade depends on the `option`) by using an appropriate conditional statement.\n",
    " - Define arrays for each task by slicing `A` (e.g., `hw = A[2:(2+number_hw), 2]`)\n",
    " - Define the `final_grade` by using the `final_percentage` and `option` variables with an appropriate conditional statement."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Nested Conditionals\n",
    "\n",
    "**Example**: Write a program that gets a number from the user, says whether it is odd or even, and if it is odd, whether it is also divisible by 3.  Produce a flowchart."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "n = int(input('enter a number: '))\n",
    "if n % 2:\n",
    "#234 <-- 4 spaces for one indentation level\n",
    "    print('n is odd')\n",
    "else:\n",
    "#234\n",
    "    print('n is even')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "**Remember that indentation matters!**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Example*:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example**: What's the tax on $75000?  Then rewrite *without* nested if's."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "income = float(input('enter your income: '))\n",
    "tax = 0.0\n",
    "if income > 13860: # poverty line\n",
    "    if income > 52500: # median income\n",
    "        if income > 250000: # average KSU college dean\n",
    "            tax += (income-250000)*.35\n",
    "            income = 250000.0\n",
    "        tax += (income-52500)*.25\n",
    "        income = 52500\n",
    "    tax += (income-13860)*.15\n",
    "print('your tax is ', tax)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Debugging\n",
    "\n",
    "> \"Everyone knows that debugging is twice as hard as writing the code in the first place. \n",
    "> Therefore, if you write the code as cleverly as possible, you are, by \n",
    "> definition, not smart enough to debug it.\"  \n",
    "> \n",
    ">  -[Brian W. Kernighan](https://en.wikipedia.org/wiki/Brian_Kernighan), \n",
    ">   from *The Elements of Programming Style*, 2nd ed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Errors are either **syntactical** or **logical**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Syntactical errors arise when the rules of Python (or another language) are broken."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Logical errors arise when the rules of logic are broken.  Sometimes, these lead to *runtime errors*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "if True\n",
    "    print(\"we forgot our colon!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "# make an array of three numbers\n",
    "a = np.array([1, 2, 3])\n",
    "# define be to be 3 times the third element\n",
    "b = 3*a[3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Does this have a bug?  What kind(s)?\n",
    "\n",
    "```\n",
    "class = \"ME 400\"\n",
    "instructor = \"Roberts\"\n",
    "print(instructor, \" teaches \", class)\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "class = \"ME 400\"\n",
    "instructor = \"Roberts\"\n",
    "print(instructor, \" teaches \", class)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Does this have a bug(s)?  What kind?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "a = np.range(5) # make some numbers\n",
    "b = a           # copy a\n",
    "a = a**2        # change a\n",
    "s = sum(b)      # compute the sum of b\n",
    "print('I'm smart and know that s is 10!')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Old-School Debugging\n",
    "\n",
    "1. Compile (or run) program, see syntax errors, and fix.\n",
    "2. Compile and run program, notice silly output \n",
    "3. Put `print` statements everywhere to see what variable has what value and when\n",
    "4. Comment and uncomment parts of code over and over to find offending lines\n",
    "5. Cry, rinse, and repeat."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Pro Tips\n",
    "\n",
    " 1. Don't make errors in the first place:\n",
    "    - **Design** your code with flowcharts and pseudocode as applicable\n",
    "    - **Use defensive programming and unit testing** (future topics)\n",
    " 2. Know what your code does before you actually run it by **tracing** it by hand \n",
    " 3. Know what your code does by tracing it via the Spyder graphical **debugger** (or similar tool)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Final Problem\n",
    "\n",
    "\n",
    "Recall we have four seasons: spring, summer, fall, and winter.\n",
    "In 2019, the official starts dates for these seasons are:\n",
    "\n",
    "\n",
    " - Spring  3/20 (called the vernal equinox) \n",
    " - Summer  6/21 (called the summer solstice) \n",
    " - Fall    9/23 (called the autumnal equinox) \n",
    " - Winter  12/21 (called the winter solstice) \n",
    "\n",
    "\n",
    "Write a program that asks a user for the date in the format used above, e.g., `2/14` or `12/25`, and displays the season. \n",
    "\n",
    "Hint: remember what type `input` produces and that the location of the forward slash `/` depends on the month.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recap\n",
    "\n",
    "You should now be able to:\n",
    "- Read and write nested `if` statements\n",
    "- Explain the difference between syntactical and logical errors\n",
    "- Use the graphical debugger in Spyder to trace and debug a program\n"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "livereveal": {
   "scroll": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
