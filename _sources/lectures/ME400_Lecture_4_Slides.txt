{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Lecture 4 - More on NumPy Arrays\n",
    " \n",
    "In this lesson, we'll continue our investigation started in [Basic_Data_Processing_with_NumPy_and_Matplotlib](Basic_Data_Processing_with_NumPy_and_Matplotlib.ipynb) and look multidimensional arrays and how to access multiple elements via *slicing*.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- *define and manipulate two-dimensional NumPy arrays*\n",
    "- *visualize two-dimensional arrays*\n",
    "- *slicing and other indexing of one- and two-dimensional arrays*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Key Terms\n",
    "\n",
    "- `np.ones` (for 2-D arrays)\n",
    "- `np.zeros` (for 2-D arrays)\n",
    "- `np.array` (for 2-D arrays)\n",
    "- `np.meshgrid`\n",
    "- `plt.contour`\n",
    "- `plt.contourf`\n",
    "- `plt.colorbar`\n",
    "-  colormap\n",
    "- slice\n",
    "- stride\n",
    "- `np.reshape`\n",
    "- `np.random.rand`\n",
    "- matrix-vector multiplication\n",
    "- `np.dot` (for 2-D arrays)\n",
    "- `np.matmul`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "from IPython.core.interactiveshell import InteractiveShell \n",
    "InteractiveShell.ast_node_interactivity = \"all\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Making and Manipulating Two-Dimensional Arrays\n",
    "\n",
    "A lot of data lives in tabulated structures, e.g., the data from [Lesson 3](ME400_Lecture_3.ipynb) loaded in via `np.loadtxt`.\n",
    "\n",
    "We can make such two-dimensional arrays.  Two easy ways are `np.ones` and `np.zeros`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "# Make a 2 by 2 array of ones\n",
    "A\n",
    "# Make a 3 by 2 array of zeros\n",
    "B"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "For both, the single argument is the `shape` having the form `(number_rows, number_columns)`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Arrays can also be produced directly from data you enter.  **For example**, make this array:\n",
    "\n",
    "$$\n",
    "  C = \\left [ \\begin{array}{cc}\n",
    "         1 & 2 \\\\\n",
    "         3 & 4 \\\\\n",
    "      \\end{array} \\right ] \\, .\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "C = np.array(   )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Elements are accessed and changed by using *two indices*.  **For example**, get the 3 from \n",
    "\n",
    "$$\n",
    "  C = \\left [ \\begin{array}{cc}\n",
    "         1 & 2 \\\\\n",
    "         3 & 4 \\\\\n",
    "      \\end{array} \\right ] \\, ,\n",
    "$$\n",
    "\n",
    "and then change the 2 to a 99."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Always, always, always, **row** then **column**.  Often, we use `i` then `j` for `C[i, j]`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Will the following work?\n",
    "\n",
    "```python\n",
    "A = np.array([1, 2, 3], [4, 5]])\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "How about whole columns or rows?  **For example**, get `[1, 99]` and `[99, 4]` from \n",
    "\n",
    "$$\n",
    "  C = \\left [ \\begin{array}{cc}\n",
    "         1 & 99 \\\\\n",
    "         3 & 4 \\\\\n",
    "      \\end{array} \\right ] \\, ,\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Slicing\n",
    "\n",
    "Slicing lets one access multiple array elements at a time.\n",
    "\n",
    "For 1-D arrays, the syntax is `a[start:end:stride]`.  **Look familiar?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.array([1,2,3,4,5])\n",
    "# get the value 1\n",
    "a[???]\n",
    "# get the values 1, 2, and 3\n",
    "a[???]\n",
    "# get the values 1, 3, and 5 (how many ways?)\n",
    "a[???]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Slicing applies equally to two-dimensional arrays but is done for each direction *independently*:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "A = np.arange(1, 10).reshape((3, 3))\n",
    "A\n",
    "# get the value 5\n",
    "A[???]\n",
    "# get the values [[1, 2], \n",
    "#                 [4, 5]]\n",
    "A[???]\n",
    "# set the values 2, 4, 6, and 8 to 99.\n",
    "A[???]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Visualizing 2-D Arrays\n",
    "\n",
    "Brief recap of 1-D: `import matplotlib.pyplot as plt` and `plt.plot(x, y)`.  Easy peasy. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Example\n",
    "\n",
    "Consider tje heat-conduction equation\n",
    "\n",
    "$$\n",
    "  -k \\left ( \\frac{d^2}{dx^2} + \\frac{d^2}{dy^2} \\right ) T(x, y) = 0 \\, ,\n",
    "$$\n",
    "\n",
    "subject to the boundary conditions $T(x, 0) = T(0, y) = T(1, y) = 0$ and $T(x, 1) = 100$ C.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "By some fancy math (i.e., separation of variables, solution of a transcendental equation, etc.), one finds\n",
    "\n",
    "$$\n",
    "     T(x, y) = \n",
    "        \\frac{400}{\\pi}  \\sum^{\\infty}_{n=1}\n",
    "             \\frac{ \\sin((2n-1) \\pi x) \\sinh((2n-1) \\pi y) }\n",
    "                  {(2n-1)\\sinh((2n-1)\\pi)}\n",
    "$$                    \n",
    "\n",
    "The goal is to *visualize* this solution as a function of $x$ and $y$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recap\n",
    "\n",
    "You should now be able to\n",
    "\n",
    "- *define and manipulate two-dimensional NumPy arrays*\n",
    "- *slicing and other indexing of one- and two-dimensional arrays*\n",
    "- *visualize two-dimensional arrays*"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  },
  "livereveal": {
   "scroll": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
