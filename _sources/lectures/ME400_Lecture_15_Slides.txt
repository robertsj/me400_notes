{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Lecture 15 - Sorting\n",
    " \n",
    "In this lecture and [Lecture 14](ME400_Lecture_14.ipynb), we tackle two of the most important practical problems in computing: *searching* and *sorting*.  In this lecture, we turn to *sorting*, the more challenging problem and one that was a focus of much research in the early years of computing for making searching easier.  We'll flex our knowledge of functions to help write clean and clear sorting programs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "\n",
    "### Objectives\n",
    "\n",
    "By the end of this lesson, you should be able to\n",
    "\n",
    "- Sort an array of numbers using brute-force, $\\mathcal{O}(n^2)$ schemes like *selection sort*.\n",
    "- Sort an array of numbers using divide-and-conquer, $\\mathcal{O}(n\\log n)$ schemes like *merge sort*.\n",
    "- Apply built-in Python functions to sort sequences.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Sorting is Hard Work\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "To sort a sequence, leverage what we know: **find the minimum value in a sequence**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "The basic idea is simple.  Given a sequence of $n$ numbers to sort in increasing order, we \n",
    "\n",
    "1. Find the smallest value (just as we have previously done).\n",
    "2. Swap it with the first element in the sequence.\n",
    "3. Repeat steps (1) and (2) this process for the last $n-1$ items in the sequence."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "This is **selection sort**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "def selection_sort(a):\n",
    "    \"\"\"Applies the selection sort algorithm to sort the sequence a.\"\"\"\n",
    "    i = 0\n",
    "    while i < len(a):\n",
    "        j = i + 1\n",
    "        k = i\n",
    "        while j < len(a):\n",
    "            if a[j] < a[k]: # compare\n",
    "                k = j\n",
    "            j += 1\n",
    "        tmp = a[i]\n",
    "        a[i] = a[k]\n",
    "        a[k] = tmp\n",
    "        # or a[i], a[k] = a[k], a[i]\n",
    "        i += 1\n",
    "    return a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**: Use `selection_sort` to sort `[3, 1, 5, 2]`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "**Exercise**: Use `selection_sort` to sort the sequence [3, $1_0$, 4, $1_1$, 2].  Here, the subscript is used to count the number of times a 1 appears in the sequence.  Does the algorithm produce [$1_0$, $1_1$, 2, 3, 4] or [$1_1$, $1_0$, 2, 3, 4]?  How can we add a subscript?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Example** As implemented, `selection_sort(a)` sorts `a` **in place**, i.e., it *modifies the sequence*.  How to produce a new sorted sequence that does not change `a`?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Better Sorting for Bigger Data\n",
    "\n",
    "**Binary search** finds things in $\\mathcal{O}(\\log n)$ operations by **divide and conquer**.\n",
    "\n",
    "The best algorithms (sorting and otherwise) use the same principle to turn apparently $\\mathcal{O}(n^2)$ problems into $\\mathcal{O}(n\\log n)$ ones.\n",
    "\n",
    "For our purposes, it is sufficient to consider the simplest of the divide and conquer approaches to sorting: [merge sort](https://en.wikipedia.org/wiki/Merge_sort)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Merge Sort\n",
    "\n",
    "Merge sort is the simplest of $\\mathcal{O}(n\\log n)$ sorting algorithms:\n",
    "  1. divide a sequence into smaller chunks that can be sorted directly \n",
    "  2. merge two sorted (sub)sequences. \n",
    "  \n",
    "Visual representation: https://www.youtube.com/watch?v=63IMRspwdQ8."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Merging Sorted Sequences\n",
    "\n",
    "Main work of merge sort is to merge *sorted* sequences into one larger, *sorted* sequence.  \n",
    "\n",
    "For example, `a = [1, 8]` and `b = [5, 7]` are merged to produce `c = [1, 5, 7, 8]`.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "```\n",
    "'''Merge: an algorithm to merge two sorted sequences'''\n",
    "Input: a, b, m, n\n",
    "# Initialize the sorted sequence\n",
    "Set c to be a sequence of length (m+n) \n",
    "# Initialize the counter for a, b, and c\n",
    "Set i = 0, j = 0, and k = 0\n",
    "While k < m + n do\n",
    "    If i < m and j < n then\n",
    "        # Both a and b still have elements to merge\n",
    "        If a[i] <= b[j] then\n",
    "            Set c[k] = a[i] \n",
    "            Set i = i + 1\n",
    "        Otherwise\n",
    "            Set c[k] = b[j]\n",
    "            Set j = j + 1\n",
    "    Otherwise, if i == m then\n",
    "        # Only b has elements left to merge\n",
    "        Set c[k] = b[j]\n",
    "        Set j = j + 1\n",
    "    Otherwise,\n",
    "        # Only a has elements left to merge\n",
    "        Set c[k] = a[i]\n",
    "        Set i = i + 1\n",
    "    Set k = k + 1\n",
    "Output: c\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Divide and Conquer\n",
    "\n",
    "Merging is half the battle: we need to dive down and get the smaller arrays to sort.  \n",
    "\n",
    "A natural approach is to use *recursion*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "def divide_and_print(a):\n",
    "    print('--'*len(a)+'>', a)\n",
    "    if len(a) == 1:\n",
    "        return\n",
    "    else:\n",
    "        divide_and_print(a[:len(a)//2])\n",
    "        divide_and_print(a[len(a)//2:])\n",
    "    return\n",
    "divide_and_print([8,7,6,5,4,3,2,1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "```\n",
    "'''Merge Sort: an algorithm to sort the sequence a'''\n",
    "Input: a\n",
    "Set n to the length of a\n",
    "If n >= 2 then\n",
    "    Set a_L to be the first half of a \n",
    "    Set a_R to be the second half of a\n",
    "    Call Merge Sort to sort a_L and assign \n",
    "      its output to a_L\n",
    "    Call Merge Sort to sort a_R and assign\n",
    "      its output to a_R\n",
    "    Call Merge to combine a_L and a_R, and assign\n",
    "      its output to a\n",
    "# Nothing is done if a has just 1 element\n",
    "Output: a\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Why we might care: merge sort is $\\mathcal{O}(n \\log n)$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "n = np.logspace(1, 6, 100)\n",
    "plt.loglog(n, n**2, 'k-', label='$\\mathcal{O}(n^2)$')\n",
    "plt.loglog(n, n*np.log(n), 'r--', label='$\\mathcal{O}(n\\, \\log \\, n)$')\n",
    "plt.grid(True)\n",
    "plt.xlabel('n')\n",
    "plt.ylabel('time')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**:  If `merge_sort` takes about 1 s to sort 1 billion number, how long would you expect it to sort 1 trillion numbers?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "##  Built-in Sorting\n",
    "\n",
    "Several options:\n",
    "- `sorted`\n",
    "- `list.sort`\n",
    "- `np.sort`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "help(sorted)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "**Exercise**: Use `sorted` to sort `a = [3, 7, 1, 4, 8, 2, 6, 5]`  (1) in increasing order and (2) in decreasing order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "a = [3, 7, 1, 4, 8, 2, 6, 5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "**Exercise**: Use `sorted` to sort `a = [(1, 9), (2, 5), (3, 7), (4, 3)]` in increasing order based on the *second* element of each element of `a` (hint: this should produce `[(4, 3), (2, 5), (3, 7), (1, 9)]`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "a = [(1, 9), (2, 5), (3, 7), (4, 3)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Recap\n",
    "\n",
    "By now, you should be able to\n",
    "\n",
    "- Sort an array of numbers using brute-force, $\\mathcal{O}(n^2)$ schemes like *selection sort*.\n",
    "- Sort an array of numbers using divide-and-conquer, $\\mathcal{O}(n\\log n)$ schemes like *merge sort*.\n",
    "- Apply built-in Python functions to sort sequences."
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "livereveal": {
   "scroll": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
